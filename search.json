[{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":null,"dir":"","previous_headings":"","what":"One or two levels in QFeatures (closed)","title":"One or two levels in QFeatures (closed)","text":"One two assay levels considered QFeatures: one level: SE contains single assay, SE processed (log-transformed, normalised, …) way dimensions stay , new SE created added QFeatures object. two level: SEs can contain multiple assays, SE processed (log-transformed, normalised, …) way dimensions stay , new assay added SE. question bioc-devel list ask advice SE processing, whether new SE new assay original SE preferred. letter arguably elegant, also used SingleAssayExperiment pipelines, doesn’t seem case using SummarizedExperiments. features (MultiAssayExperiments general), two-level approach isn’t readily available ---box, require additional developments: Every function operates SE QFeatures object need allow user specify assay use (/default use latest one). show,QFeatures method need display number/names assays SE make two levels explicit. Despite elegant two-level option, seems additional development isn’t warranted time. updateAssay function originally intended two-level approach, .e. add assay SE. considered anymore (now, least). one exception though. aggregating features aggregateFeatures(), second assay added, named aggcounts counts number features aggregate sample low-level features.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"how-to-add-new-assays-closed","dir":"","previous_headings":"","what":"How to add new assays (closed)","title":"One or two levels in QFeatures (closed)","text":"aggregation aggregateFeatures. Processing SE. can/done explicitly addAssay implicitly Joining SEs (example multiple TMT batches) (TODO) See .","code":"addAssay(cptac, logTransform(cptac[[\"peptides\"]]), name = \"peptides_log\") addAssay(cptac, logTransform(cptac[[1]]), name = \"peptides_log\") logTransform(cptac, \"peptides\", name = \"peptides_log\") logTransform(cptac, 1, name = \"peptides_log\") joinAssays(QFeatures, c(\"pep_batch1\", \"pep_batch2\", \"pep_batch3\"), name = \"peptides\") joinAssays(QFeatures, c(1, 2, 3), name = \"peptides\")"},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"processing-functions","dir":"","previous_headings":"","what":"Processing functions","title":"One or two levels in QFeatures (closed)","text":"processing function acts Feature’s assay (typically SummarizedExperiment SingleCellExperiment) process(object), returns new object type. processing function process(object, ), acts Feautre object takes second argument , can vector indices names, returns new object class QFeatures assay(s) modified according process(object[[]]). argument mustn’t missing, .e. one shouldn’t (least general) permit (blindly) apply processing assays.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"assays","dir":"","previous_headings":"","what":"Assays","title":"One or two levels in QFeatures (closed)","text":"Assays unique rownames (even though isn’t required SEs). aren’t, first occurence name kept: underlying reason fails due matrix subsetting name names aren’t unique. course, affects SEs … … MultiAssayExperiments. Note example , \"ANLPQSFQVDTSk\" present psms peptides assays, loop .subsetByFeature isn’t executed . need investigated. behaviour can reproduced even ’s case. See fixed switching indices: See issue #91.","code":"hlpsms <- hlpsms[1:5000, ] ## faster  ft1 <- readQFeatures(hlpsms, ecol = 1:10, name = \"psms\", fname = \"Sequence\") sum(rownames(ft1[[1]]) == \"ANLPQSFQVDTSk\") ft1 <- aggregateFeatures(ft1, \"psms\", fcol = \"Sequence\",                          name = \"peptides\", fun = colSums) sapply(rownames(ft1), anyDuplicated) ft1  ## subsetting still works ft2 <- subsetByFeature(ft1, \"ANLPQSFQVDTSk\") ft2 m <- matrix(1:10, ncol = 2) colnames(m) <- LETTERS[1:2] rownames(m) <- c(\"a\", letters[1:4]) m m[\"a\", ] se <- SummarizedExperiment(m) assay(se[\"a\", ]) for (k in setdiff(all_assays_names, leaf_assay_name)) { ... } hlpsms$Sequence2 <- paste0(hlpsms$Sequence, \"2\") ft1 <- readQFeatures(hlpsms, ecol = 1:10, name = \"psms\", fname = \"Sequence2\") ... > (i <- which(rownames(m) == \"a\")) [1] 1 2 > m[i, ]   A B a 1 6 a 2 7 > se[i, ] class: SummarizedExperiment dim: 2 2 metadata(0): assays(1): '' rownames(2): a a rowData names(0): colnames(2): A B colData names(0):"},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"assay-links","dir":"","previous_headings":"","what":"Assay links","title":"One or two levels in QFeatures (closed)","text":"Currently, Assay links produces aggregateFeatures manually addAssayLink. One--one Assay links produced processing function logTransform addAssayLinkOneToOne. contain \"OneToOne\" fcol slot (issue 42). need assay link stemming combining assays (see issue 52).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"joining-assays-closed","dir":"","previous_headings":"","what":"Joining assays (closed)","title":"One or two levels in QFeatures (closed)","text":"combine assays, also need 1. relaxed MatchedAssayExperiment constrains (see #46) 2. assay links multiple parent assays (see #52) combine,MSnSet,MSnSet two things, .e. rbind cbind. , nedd (least first instance) cbind,SummarizedExperiment. need constrains requiering identical rownames? cbind,SummarizedExperiment uses mcols check whether rows match. unique rows one assay get NAs one? yes! need join-type function, adds NAs assay level. , need union features rbinding assays. rowData, want keep mcols match exactly assays (ex: PeptideSequence, ProteinAccession, …) remove mcols differ assays (ex: PEP, qvalues, charge, rtime, …) row data accessible links assays anyway. Naming: Algorithm: 1. Find mcols keep 2. Extend rownames NAs (depending type join) 3. Order assays 4. cbind assays (see cbind,SummarizedExperiment) want public join SummarizedExperiments? Discuss SE maintainers. Note: assay multiple fractions rbinded, consider rbindAssays, mergeFractions, bindFractions, …","code":"joinAssays(QFeatures, c(\"pep_batch1\", \"pep_batch2\", \"pep_batch3\"), name = \"peptides\") joinAssays(QFeatures, c(1, 2, 3), name = \"peptides\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"replacing-vs-adding-assays","dir":"","previous_headings":"","what":"Replacing vs adding assays","title":"One or two levels in QFeatures (closed)","text":"Issues https://github.com/rformassspectrometry/QFeatures/issues/193 https://github.com/rformassspectrometry/QFeatures/issues/186. Currently, assays replaced - filterNA() - filterFeatures() (possibly others) Sometimes, want add, rather replace, example want test/assess effect different filters. defined names argument. missing (default), assays replaced. present length , new assays added. comes data processing, also subset argument, implicitly process subset rows avoid explicitly store subset/intermediate assay. radical change filterFeatures() add rowData logical defines rows filtered. multiple ideas/discussion replated QFeatures becoming large (slow). Rather adding assays, : - use logical subsetting; - use multiple assays within SingleCellExperiment (SE), dimensions remain identical (exmple logTransform()); - unique database handle manage data (assays rowData). agree interface, user, remain simple, .e. different assays. now, keep philosophy create new assays operations, start reflexion -depth refactoring. See also HDF5 backend issue.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"scp","dir":"","previous_headings":"","what":"scp","title":"One or two levels in QFeatures (closed)","text":"scp data import documentation. Current approach doesn’t work well LFQ. Add documentation, align scpGUIImport. Compute mertics per cell clumsy/ad hoc moment. need general function iterates cells/features store automatically col/rowData. computed defined user-defined function. example *OverSample() *OverFeatures() general computeMetric(). added QFeatures specialised metrics implemented scp. Merge scplainer scp (issue 45): needs unit tests Missing data vignette/report: unit tests coming soon readScpFromDIANN() needs unit test refactoring divideByReference() batch correction method, moved QFeatures, made accessible part general batchCorrect() interface, can also used combat limma.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"scpdata","dir":"","previous_headings":"","what":"scpdata","title":"One or two levels in QFeatures (closed)","text":"Keep adding new datasets.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"qfeatures","dir":"","previous_headings":"","what":"QFeatures","title":"One or two levels in QFeatures (closed)","text":"QFeatures functions add assays - see ‘Replacing vs adding assays’ . filterNA() columns (see https://github.com/rformassspectrometry/QFeatures/issues/173]. use computeMetricOverCells() metric nNA? Small bugs: nNA() empty assays longFormat(se, rowvars) (eventhough latter probbaly use tidy versions). Interest pseudo-bulking, work ---box, since colData unique assaya (Chris address post-doc).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"tabular-input-issue-199","dir":"","previous_headings":"","what":"Tabular input (issue 199)","title":"One or two levels in QFeatures (closed)","text":"Single-set case, multiplexed: requires colAnnotation . Also LF re-ordered peptide/protein-level table (runs missing case). Multi-set case, multiplexed: requires colAnnotation runCol. Multi-set case, LF: requires colData runCol optional multiplexing (plexDIA). Special case DIANN. specialised function parses table case 2. Users can either use arguments colAnnotation data.frame (become colData).","code":"|------+------------+-----------| | cols | Quant 1..N | more cols | |      |            |           | |      |            |           | |      |            |           | |------+------------+-----------| readQFeatures(hlpsms, quantCols = 1:10) readQFeatures(hlpsms, colAnnotation = colann)  ## also possible, but redundant readQFeatures(hlpsms, colAnnotation = colann, quantCols = 1:10) |-----+------+------------+-----------| | Run | cols | Quant 1..N | more cols | |   1 |      |            |           | |   1 |      |            |           | |-----+------+------------+-----------| |   2 |      |            |           | |-----+------+------------+-----------| readQFeatures(hlpsms, quantCols = 1:10, runCol = \"file\") readQFeatures(hlpsms, colAnnotation = colann, runCol = \"file\") |-----+------+---------+-----------+-----------| | Run | cols | Quant 1 | more cols | multiplex | |   1 |      |         |           |           | |   1 |      |         |           |           | |-----+------+---------+-----------+-----------| |   2 |      |         |           |           | |-----+------+---------+-----------+-----------|"},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"diann-data","dir":"","previous_headings":"","what":"DIANN data","title":"One or two levels in QFeatures (closed)","text":"DIANN data long format readQFeaturesFromDIANN() need transform long wide, use readQFeatures() multiplexing: NULL “none”","code":"dfr |>   diannWider() |>   readQFeatures()  readQFeaturesFromDIANN <- funtion(dfr, multiplexing = NULL, ...) {     if (!is.null(multiplexing))         x <- .diannWider(multiplexing)     readQFeatures(x, ...) }"},{"path":"https://rformassspectrometry.github.io/QFeatures/NOTES.html","id":"possible-optimsations","dir":"","previous_headings":"","what":"Possible optimsations","title":"One or two levels in QFeatures (closed)","text":"Simple ones longForm() na.rm argument propagate reshape2::melt() assay. require loop assay, extract getWithColData(), use longFormSE() supporting na.rm. Parallelise aggregateFeatures(), logTransform(), scaleTransform(), impute(), …","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"reading-data-as-qfeatures","dir":"Articles","previous_headings":"","what":"Reading data as QFeatures","title":"Processing quantitative proteomics data with QFeatures","text":"going use subset CPTAC study 6 containing conditions B (Paulovich et al. 2010). peptide-level data, processed MaxQuant (Cox Mann 2008) available msdata package: names columns, see quantitative columns, starting \"Intensity.\" (note dot!) positions 56 61. now read data using readQFeatures function. peptide level expression data imported R instance class QFeatures named cptac assay named peptides. also use fnames argument set row-names peptides assay peptide sequences.","code":"basename(f <- msdata::quant(pattern = \"cptac\", full.names = TRUE)) ## [1] \"cptac_a_b_peptides.txt\" x <- read.delim(f) names(x) ##  [1] \"Sequence\"                 \"N.term.cleavage.window\"   ##  [3] \"C.term.cleavage.window\"   \"Amino.acid.before\"        ##  [5] \"First.amino.acid\"         \"Second.amino.acid\"        ##  [7] \"Second.last.amino.acid\"   \"Last.amino.acid\"          ##  [9] \"Amino.acid.after\"         \"A.Count\"                  ## [11] \"R.Count\"                  \"N.Count\"                  ## [13] \"D.Count\"                  \"C.Count\"                  ## [15] \"Q.Count\"                  \"E.Count\"                  ## [17] \"G.Count\"                  \"H.Count\"                  ## [19] \"I.Count\"                  \"L.Count\"                  ## [21] \"K.Count\"                  \"M.Count\"                  ## [23] \"F.Count\"                  \"P.Count\"                  ## [25] \"S.Count\"                  \"T.Count\"                  ## [27] \"W.Count\"                  \"Y.Count\"                  ## [29] \"V.Count\"                  \"U.Count\"                  ## [31] \"Length\"                   \"Missed.cleavages\"         ## [33] \"Mass\"                     \"Proteins\"                 ## [35] \"Leading.razor.protein\"    \"Start.position\"           ## [37] \"End.position\"             \"Unique..Groups.\"          ## [39] \"Unique..Proteins.\"        \"Charges\"                  ## [41] \"PEP\"                      \"Score\"                    ## [43] \"Identification.type.6A_7\" \"Identification.type.6A_8\" ## [45] \"Identification.type.6A_9\" \"Identification.type.6B_7\" ## [47] \"Identification.type.6B_8\" \"Identification.type.6B_9\" ## [49] \"Experiment.6A_7\"          \"Experiment.6A_8\"          ## [51] \"Experiment.6A_9\"          \"Experiment.6B_7\"          ## [53] \"Experiment.6B_8\"          \"Experiment.6B_9\"          ## [55] \"Intensity\"                \"Intensity.6A_7\"           ## [57] \"Intensity.6A_8\"           \"Intensity.6A_9\"           ## [59] \"Intensity.6B_7\"           \"Intensity.6B_8\"           ## [61] \"Intensity.6B_9\"           \"Reverse\"                  ## [63] \"Potential.contaminant\"    \"id\"                       ## [65] \"Protein.group.IDs\"        \"Mod..peptide.IDs\"         ## [67] \"Evidence.IDs\"             \"MS.MS.IDs\"                ## [69] \"Best.MS.MS\"               \"Oxidation..M..site.IDs\"   ## [71] \"MS.MS.Count\" (i <- grep(\"Intensity\\\\.\", names(x))) ## [1] 56 57 58 59 60 61 library(\"QFeatures\") cptac <- readQFeatures(x, quantCols = i, name = \"peptides\", fnames = \"Sequence\") ## Checking arguments. ## Loading data as a 'SummarizedExperiment' object. ## Formatting sample annotations (colData). ## Formatting data as a 'QFeatures' object. ## Setting assay rownames. cptac ## An instance of class QFeatures (type: bulk) with 1 set: ##  ##  [1] peptides: SummarizedExperiment with 11466 rows and 6 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"encoding-the-experimental-design","dir":"Articles","previous_headings":"","what":"Encoding the experimental design","title":"Processing quantitative proteomics data with QFeatures","text":"update sample (column) annotations encode two groups, 6A 6B, original sample numbers.","code":"cptac$group <- rep(c(\"6A\", \"6B\"), each = 3) cptac$sample <- rep(7:9, 2) colData(cptac) ## DataFrame with 6 rows and 2 columns ##                      group    sample ##                <character> <integer> ## Intensity.6A_7          6A         7 ## Intensity.6A_8          6A         8 ## Intensity.6A_9          6A         9 ## Intensity.6B_7          6B         7 ## Intensity.6B_8          6B         8 ## Intensity.6B_9          6B         9"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"filtering-out-contaminants-and-reverse-hits","dir":"Articles","previous_headings":"","what":"Filtering out contaminants and reverse hits","title":"Processing quantitative proteomics data with QFeatures","text":"","code":"filterFeatures(cptac, ~ Reverse == \"\") ## 'Reverse' found in 1 out of 1 assay(s). ## An instance of class QFeatures (type: bulk) with 1 set: ##  ##  [1] peptides: SummarizedExperiment with 11436 rows and 6 columns filterFeatures(cptac, ~ Potential.contaminant == \"\") ## 'Potential.contaminant' found in 1 out of 1 assay(s). ## An instance of class QFeatures (type: bulk) with 1 set: ##  ##  [1] peptides: SummarizedExperiment with 11385 rows and 6 columns cptac <- cptac |>     filterFeatures(~ Reverse == \"\") |>     filterFeatures(~ Potential.contaminant == \"\") ## 'Reverse' found in 1 out of 1 assay(s). ## 'Potential.contaminant' found in 1 out of 1 assay(s)."},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"removing-up-unneeded-feature-variables","dir":"Articles","previous_headings":"","what":"Removing up unneeded feature variables","title":"Processing quantitative proteomics data with QFeatures","text":"spreadsheet read contained numerous variables returned MaxQuant, necessarily necessary frame downstream statistical analysis. ones needing peptides sequences protein identifiers. , store variables interest filter using selectRowData function.","code":"rowDataNames(cptac) ## CharacterList of length 1 ## [[\"peptides\"]] Sequence N.term.cleavage.window ... MS.MS.Count rowvars <- c(\"Sequence\", \"Proteins\", \"Leading.razor.protein\") cptac <- selectRowData(cptac, rowvars) rowDataNames(cptac) ## CharacterList of length 1 ## [[\"peptides\"]] Sequence Proteins Leading.razor.protein"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"managing-missing-values","dir":"Articles","previous_headings":"","what":"Managing missing values","title":"Processing quantitative proteomics data with QFeatures","text":"Missing values can numerous certain proteomics experiments need dealt carefully. first step assess presence across samples features. able , need replace 0 NA, given MaxQuant encodes missing data 0 using zeroIsNA function. output nNA function tells us currently close 50% missing values data; 4051 peptides 0 missing values, 989 single missing values, … 3014 peptides composed missing values; range missing values 6 samples comparable ranges 4651 5470. dataset, high number peptides without data 6 samples subset larger dataset, peptides happened absent groups B. , use filterNA remove peptides contain one missing values using pNA = 0 (also default value). wanted keep peptides 90% missing values, corresponsing case one value (.e 5/6 percent missing values), set pNA 0.9.","code":"cptac <- zeroIsNA(cptac, i = seq_along(cptac)) nNA(cptac, i = seq_along(cptac)) ## $nNA ## DataFrame with 1 row and 3 columns ##         assay       nNA       pNA ##   <character> <integer> <numeric> ## 1    peptides     30609  0.449194 ##  ## $nNArows ## DataFrame with 11357 rows and 4 columns ##             assay          name       nNA       pNA ##       <character>   <character> <integer> <numeric> ## 1        peptides AAAAGAGGAG...         4  0.666667 ## 2        peptides     AAAALAGGK         0  0.000000 ## 3        peptides    AAAALAGGKK         0  0.000000 ## 4        peptides AAADALSDLE...         0  0.000000 ## 5        peptides AAADALSDLE...         0  0.000000 ## ...           ...           ...       ...       ... ## 11353    peptides YYSIYDLGNN...         6  1.000000 ## 11354    peptides YYTFNGPNYN...         3  0.500000 ## 11355    peptides    YYTITEVATR         4  0.666667 ## 11356    peptides YYTVFDRDNN...         6  1.000000 ## 11357    peptides YYTVFDRDNN...         6  1.000000 ##  ## $nNAcols ## DataFrame with 6 rows and 4 columns ##         assay          name       nNA       pNA ##   <character>   <character> <integer> <numeric> ## 1    peptides Intensity....      4669  0.411112 ## 2    peptides Intensity....      5388  0.474421 ## 3    peptides Intensity....      5224  0.459981 ## 4    peptides Intensity....      4651  0.409527 ## 5    peptides Intensity....      5470  0.481641 ## 6    peptides Intensity....      5207  0.458484 cptac <- filterNA(cptac, i = seq_along(cptac), pNA = 0) cptac ## An instance of class QFeatures (type: bulk) with 1 set: ##  ##  [1] peptides: SummarizedExperiment with 4051 rows and 6 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"counting-unique-features","dir":"Articles","previous_headings":"","what":"Counting unique features","title":"Processing quantitative proteomics data with QFeatures","text":"Counting number unique features across samples can used quality control assessing identification efficiency different conditions experimental set-ups. countUniqueFeatures can used count number features contained sample assay QFeatures object. instance, can count number (non-missing) peptides per sample peptides assay. Note counts automatically stored colData cptac, peptide_counts: can also count number unique proteins. therefore need tell countUniqueFeatures need group protein (protein name stored rowData Proteins):","code":"cptac <- countUniqueFeatures(cptac,                              i = \"peptides\",                              colDataName = \"peptide_counts\") colData(cptac) ## DataFrame with 6 rows and 3 columns ##                      group    sample peptide_counts ##                <character> <integer>      <integer> ## Intensity.6A_7          6A         7           4051 ## Intensity.6A_8          6A         8           4051 ## Intensity.6A_9          6A         9           4051 ## Intensity.6B_7          6B         7           4051 ## Intensity.6B_8          6B         8           4051 ## Intensity.6B_9          6B         9           4051 cptac <- countUniqueFeatures(cptac,                              i = \"peptides\",                              groupBy = \"Proteins\",                              colDataName = \"protein_counts\") colData(cptac) ## DataFrame with 6 rows and 4 columns ##                      group    sample peptide_counts protein_counts ##                <character> <integer>      <integer>      <integer> ## Intensity.6A_7          6A         7           4051           1125 ## Intensity.6A_8          6A         8           4051           1125 ## Intensity.6A_9          6A         9           4051           1125 ## Intensity.6B_7          6B         7           4051           1125 ## Intensity.6B_8          6B         8           4051           1125 ## Intensity.6B_9          6B         9           4051           1125"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"imputation","dir":"Articles","previous_headings":"","what":"Imputation","title":"Processing quantitative proteomics data with QFeatures","text":"impute method can used perform missing value imputation using variety imputation methods. method takes instance class QFeatures (SummarizedExperiment) input, character naming desired method (see ?impute complete list details) returns new instance class QFeatures (SummarizedExperiment) imputed data. described details (Lazar et al. 2016), two types mechanisms resulting missing values LC/MSMS experiments. Missing values resulting absence detection feature, despite ions present detectable concentrations. example case ion suppression result stochastic, data-dependent nature MS acquisition method. missing value expected randomly distributed data defined missing random (MAR) missing completely random (MCAR). Biologically relevant missing values, resulting absence low abundance ions (limit detection instrument). missing values expected randomly distributed data defined missing random (MNAR). MAR MCAR values can reasonably well tackled many imputation methods. MNAR data, however, requires knowledge underlying mechanism generates missing data, able attempt data imputation. MNAR features ideally imputed left-censor (example using deterministic probabilistic minimum value) method. Conversely, recommended use hot deck methods (example nearest neighbour, maximum likelihood, etc) data missing random. Mixed imputation method. Black cells represent presence quantitation values light grey corresponds missing data. two groups interest depicted green blue along heatmap columns. Two classes proteins annotated left: yellow proteins randomly occurring missing values () proteins brown candidates non-random missing value imputation. anticipated identification classes missing values depend various factors, feature intensities experimental design. , use perform mixed imputation, applying nearest neighbour imputation 654 features assumed contain randomly distributed missing values () (yellow figure @ref(fig:miximp)) deterministic minimum value imputation 35 proteins display non-random pattern missing values (brown figure @ref(fig:miximp)).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"data-transformation","dir":"Articles","previous_headings":"","what":"Data transformation","title":"Processing quantitative proteomics data with QFeatures","text":"analysing continuous data using parametric methods (t-test linear models), often necessary log-transform data. figure (left) show data mainly composed small values long tail larger ones, typical pattern quantitative omics data. , use logTransform function log2-transform data. time, instead overwriting peptides assay, going create new one contain log2-transformed data. addAssay() function general function adds new assays QFeatures object. step easily exectuted logTransform() method, directly returns updated QFeatures object. Using logTransform() also automatically adds links assays. Quantitative data original scale (left) log2-transformed (right).","code":"addAssay(cptac,          logTransform(cptac[[1]]),          name = \"peptides_log\") cptac <- logTransform(cptac,                       i = \"peptides\",                       name = \"peptides_log\") cptac ## An instance of class QFeatures (type: bulk) with 2 sets: ##  ##  [1] peptides: SummarizedExperiment with 4051 rows and 6 columns  ##  [2] peptides_log: SummarizedExperiment with 4051 rows and 6 columns par(mfrow = c(1, 2)) limma::plotDensities(assay(cptac[[1]])) limma::plotDensities(assay(cptac[[2]]))"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"normalisation","dir":"Articles","previous_headings":"","what":"Normalisation","title":"Processing quantitative proteomics data with QFeatures","text":"Assays QFeatures objects can normalised normalize function. type normalisation defined method argument; , use median normalisation, store normalised data new experiment, visualise resulting data. normalize() function can also directly applied QFeatures object. also possible extract normalise peptides_log SummarizedExperiment add back QFeatures object addAssay(). Distribution log2 peptide intensities (left) (right) median normalisation.","code":"cptac <- normalize(cptac,                    i = \"peptides_log\",                    name = \"peptides_norm\",                    method = \"diff.median\") cptac ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] peptides: SummarizedExperiment with 4051 rows and 6 columns  ##  [2] peptides_log: SummarizedExperiment with 4051 rows and 6 columns  ##  [3] peptides_norm: SummarizedExperiment with 4051 rows and 6 columns addAssay(cptac,          normalize(cptac[[\"peptides_log\"]],                    method = \"center.median\"),          name = \"peptides_norm\") par(mfrow = c(1, 2)) limma::plotDensities(assay(cptac[[\"peptides_log\"]])) limma::plotDensities(assay(cptac[[\"peptides_norm\"]]))"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"feature-aggregation","dir":"Articles","previous_headings":"","what":"Feature aggregation","title":"Processing quantitative proteomics data with QFeatures","text":"stage, possible directly use peptide-level intensities perform statistical analysis (Goeminne, Gevaert, Clement 2016), aggregate peptide-level data protein intensities, perform differential expression analysis protein level. aggregate feature data, can use aggregateFeatures function takes following inputs: name QFeatures instance contains peptide quantitation data - \"cptac\" example; : name index assay contains (normalised) peptide quantitation data - \"peptides_norm\" case; fcol: feature variable (assay ) used define peptides aggregate - \"Proteins\" , given want aggregate peptides belong one protein (group); name: name new aggregates assay - \"proteins\" case; finally fun, function compute aggregation - using default value, namely robustSummary (Sticker et al. 2019). obtain final 1125 quantified proteins new proteins assay. , display quantitation data first 6 proteins respective variables. latter shown number peptides using aggregation step (.n column). can get quick overview .n variable computing table , shows us 405 proteins based single peptides, 230 based two, 119 based three, … single protein results aggregating 44 peptides. Let’s choose P02787ups|TRFE_HUMAN_UPS visualise expression pattern 2 groups protein (log-tranformed normalised) peptide level. drop first peptide-level assay different scale (.e. log-transformed). Expression intensities protein P02787ups|TRFE_HUMAN_UPS (right, green) peptides (left) groups (circles) B (triangles).","code":"cptac <- aggregateFeatures(cptac,                            i = \"peptides_norm\",                            fcol = \"Proteins\",                            name = \"proteins\") ## Aggregated: 1/1 cptac ## An instance of class QFeatures (type: bulk) with 4 sets: ##  ##  [1] peptides: SummarizedExperiment with 4051 rows and 6 columns  ##  [2] peptides_log: SummarizedExperiment with 4051 rows and 6 columns  ##  [3] peptides_norm: SummarizedExperiment with 4051 rows and 6 columns  ##  [4] proteins: SummarizedExperiment with 1125 rows and 6 columns head(assay(cptac[[\"proteins\"]])) ##                                      Intensity.6A_7 Intensity.6A_8 ## P00918ups|CAH2_HUMAN_UPS                   17.23988       16.98222 ## P01008ups|ANT3_HUMAN_UPS;CON__P41361       16.81917       16.11327 ## P01127ups|PDGFB_HUMAN_UPS                  16.45163       16.90199 ## P02144ups|MYG_HUMAN_UPS                    16.81662       16.55897 ## P02753ups|RETBP_HUMAN_UPS                  17.80433       16.79555 ## P02787ups|TRFE_HUMAN_UPS                   16.74488       16.97394 ##                                      Intensity.6A_9 Intensity.6B_7 ## P00918ups|CAH2_HUMAN_UPS                   16.63167       18.27738 ## P01008ups|ANT3_HUMAN_UPS;CON__P41361       16.33382       16.72030 ## P01127ups|PDGFB_HUMAN_UPS                  16.83464       18.19830 ## P02144ups|MYG_HUMAN_UPS                    17.28038       17.86570 ## P02753ups|RETBP_HUMAN_UPS                  16.55527       18.39382 ## P02787ups|TRFE_HUMAN_UPS                   16.34641       18.13812 ##                                      Intensity.6B_8 Intensity.6B_9 ## P00918ups|CAH2_HUMAN_UPS                   18.54886       18.46754 ## P01008ups|ANT3_HUMAN_UPS;CON__P41361       16.74130       16.48097 ## P01127ups|PDGFB_HUMAN_UPS                  18.77132       17.16724 ## P02144ups|MYG_HUMAN_UPS                    18.55434       18.29205 ## P02753ups|RETBP_HUMAN_UPS                  17.73507       18.15238 ## P02787ups|TRFE_HUMAN_UPS                   18.51059       18.15718 rowData(cptac[[\"proteins\"]]) ## DataFrame with 1125 rows and 3 columns ##                                           Proteins Leading.razor.protein ##                                        <character>           <character> ## P00918ups|CAH2_HUMAN_UPS             P00918ups|...         P00918ups|... ## P01008ups|ANT3_HUMAN_UPS;CON__P41361 P01008ups|...         P01008ups|... ## P01127ups|PDGFB_HUMAN_UPS            P01127ups|...         P01127ups|... ## P02144ups|MYG_HUMAN_UPS              P02144ups|...         P02144ups|... ## P02753ups|RETBP_HUMAN_UPS            P02753ups|...         P02753ups|... ## ...                                            ...                   ... ## sp|Q99207|NOP14_YEAST                sp|Q99207|...         sp|Q99207|... ## sp|Q99216|PNO1_YEAST                 sp|Q99216|...         sp|Q99216|... ## sp|Q99257|MEX67_YEAST                sp|Q99257|...         sp|Q99257|... ## sp|Q99258|RIB3_YEAST                 sp|Q99258|...         sp|Q99258|... ## sp|Q99383|HRP1_YEAST                 sp|Q99383|...         sp|Q99383|... ##                                             .n ##                                      <integer> ## P00918ups|CAH2_HUMAN_UPS                     1 ## P01008ups|ANT3_HUMAN_UPS;CON__P41361         1 ## P01127ups|PDGFB_HUMAN_UPS                    1 ## P02144ups|MYG_HUMAN_UPS                      1 ## P02753ups|RETBP_HUMAN_UPS                    2 ## ...                                        ... ## sp|Q99207|NOP14_YEAST                        1 ## sp|Q99216|PNO1_YEAST                         1 ## sp|Q99257|MEX67_YEAST                        2 ## sp|Q99258|RIB3_YEAST                         2 ## sp|Q99383|HRP1_YEAST                         2 table(rowData(cptac[[\"proteins\"]])$.n) ##  ##   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  ## 405 230 119  84  64  53  37  29  24  24  13   9   4   3   3   7   3   1   1   1  ##  21  22  23  24  25  30  31  33  44  ##   1   2   2   1   1   1   1   1   1 library(\"ggplot2\") library(\"dplyr\") longForm(cptac[\"P02787ups|TRFE_HUMAN_UPS\", , -1]) |>     as.data.frame() |>     mutate(group = ifelse(grepl(\"A\", colname), \"A\", \"B\")) |>     mutate(sample = sub(\"Intensity\\\\.\", \"\", colname)) |>     ggplot(aes(x = sample, y = value,                colour = rowname,                shape = group)) +     geom_line(aes(group = rowname)) +     geom_point(size = 3) +     facet_grid(~ assay) ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 6 sampleMap rows not in names(experiments)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Processing quantitative proteomics data with QFeatures","text":"vignettes QFeatures package. QFeaturesWorkshop2020 workshop, presented EuroBioc2020 meeting. also documents use custom docker container run workshop code. Quantitative proteomics data analysis chapter WSBIM2122 course.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Processing quantitative proteomics data with QFeatures","text":"","code":"## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] gplots_3.2.0                dplyr_1.1.4                 ##  [3] ggplot2_3.5.2               QFeatures_1.19.2            ##  [5] MultiAssayExperiment_1.35.3 SummarizedExperiment_1.39.0 ##  [7] Biobase_2.69.0              GenomicRanges_1.61.0        ##  [9] GenomeInfoDb_1.45.3         IRanges_2.43.0              ## [11] S4Vectors_0.47.0            BiocGenerics_0.55.0         ## [13] generics_0.1.4              MatrixGenerics_1.21.0       ## [15] matrixStats_1.5.0           BiocStyle_2.37.0            ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.6            xfun_0.52               bslib_0.9.0             ##  [4] caTools_1.18.3          htmlwidgets_1.6.4       lattice_0.22-7          ##  [7] bitops_1.0-9            vctrs_0.6.5             tools_4.5.0             ## [10] tibble_3.2.1            cluster_2.1.8.1         pkgconfig_2.0.3         ## [13] BiocBaseUtils_1.11.0    KernSmooth_2.23-26      Matrix_1.7-3            ## [16] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         ## [19] farver_2.1.2            compiler_4.5.0          stringr_1.5.1           ## [22] textshaping_1.0.1       statmod_1.5.0           clue_0.3-66             ## [25] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             ## [28] lazyeval_0.2.2          pkgdown_2.1.3.9000      pillar_1.10.2           ## [31] crayon_1.5.3            jquerylib_0.1.4         tidyr_1.3.1             ## [34] MASS_7.3-65             limma_3.65.1            DelayedArray_0.35.1     ## [37] cachem_1.1.0            abind_1.4-8             gtools_3.9.5            ## [40] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           ## [43] purrr_1.0.4             reshape2_1.4.4          bookdown_0.43           ## [46] labeling_0.4.3          fastmap_1.2.0           grid_4.5.0              ## [49] cli_3.6.5               SparseArray_1.9.0       magrittr_2.0.3          ## [52] S4Arrays_1.9.0          withr_3.0.2             scales_1.4.0            ## [55] UCSC.utils_1.5.0        rmarkdown_2.29          XVector_0.49.0          ## [58] httr_1.4.7              igraph_2.1.4            ragg_1.4.0              ## [61] evaluate_1.0.3          knitr_1.50              rlang_1.1.6             ## [64] Rcpp_1.0.14             glue_1.8.0              BiocManager_1.30.25     ## [67] msdata_0.49.0           jsonlite_2.0.0          AnnotationFilter_1.33.0 ## [70] R6_2.6.1                plyr_1.8.9              systemfonts_1.2.3       ## [73] fs_1.6.6                ProtGenerics_1.41.0     MsCoreUtils_1.21.0"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Processing.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Processing quantitative proteomics data with QFeatures","text":"vignette distributed CC -SA license license.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quantitative features for mass spectrometry data","text":"QFeatures package provides infrastructure (classes store data methods process manipulate ) manage analyse quantitative features mass spectrometry experiments. based SummarizedExperiment MultiAssayExperiment classes. Assays QFeatures object hierarchical relation: proteins composed peptides, produced spectra, depicted figure @ref(fig:featuresplot). Throughout aggregation processing data, relations assays tracked recorded, thus allowing users easily navigate across spectra, peptide protein quantitative data. Conceptual representation QFeatures object aggregative relation different assays. following sections, going demonstrate create single-assay QFeatures objects starting spreadsheet, compute next assays (peptides proteins), can manipulated explored.","code":"library(\"QFeatures\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"creating-qfeatures-object","dir":"Articles","previous_headings":"","what":"Creating QFeatures object","title":"Quantitative features for mass spectrometry data","text":"QFeatures objects can created manually (see ?QFeatures details), users probably possess quantitative data spreadsheet dataframe. cases, easiest use readQFeatures function extract quantitative data metadata columns. , load hlpsms dataframe contains data 3010 PSMs TMT-10plex hyperLOPIT spatial proteomics experiment (Christoforou et al. 2016). quantCols argument specifies columns 1 10 contain quantitation data, assay named psms returned QFeatures object, reflect nature data. , see can extract assay using index name. individual assays stored SummarizedExperiment object access quantitative data metadata using assay rowData functions details manipulate objects, refer MultiAssayExperiment (Ramos et al. 2017) SummarizedExperiment (Morgan et al. 2019) packages. illustrated figure @ref(fig:featuresplot), central characteristic QFeatures objects aggregative relation assays. can obtained aggregateFeatures function aggregate quantitative features one assay new one. next code chunk, aggregate PSM-level data peptide grouping PSMs matched peptide sequence. , aggregation function set, example, mean. new assay named peptides. , repeat aggregation operation grouping peptides proteins defined ProteinGroupAccessions variable. sample assayed QFeatures object can documented colData slot. hl data doens’t currently possess sample metadata. can addedd new DataFrame matching names (.e. DataFrame rownames must identical assay’s colnames) can added one variable time, shown .","code":"data(hlpsms) hl <- readQFeatures(hlpsms, quantCols = 1:10, name = \"psms\") ## Checking arguments. ## Loading data as a 'SummarizedExperiment' object. ## Formatting sample annotations (colData). ## Formatting data as a 'QFeatures' object. hl ## An instance of class QFeatures (type: bulk) with 1 set: ##  ##  [1] psms: SummarizedExperiment with 3010 rows and 10 columns hl[[1]] ## class: SummarizedExperiment  ## dim: 3010 10  ## metadata(0): ## assays(1): '' ## rownames(3010): 1 2 ... 3009 3010 ## rowData names(18): Sequence ProteinDescriptions ... RTmin markers ## colnames(10): X126 X127C ... X130N X131 ## colData names(0): hl[[\"psms\"]] ## class: SummarizedExperiment  ## dim: 3010 10  ## metadata(0): ## assays(1): '' ## rownames(3010): 1 2 ... 3009 3010 ## rowData names(18): Sequence ProteinDescriptions ... RTmin markers ## colnames(10): X126 X127C ... X130N X131 ## colData names(0): head(assay(hl[[\"psms\"]])) ##         X126      X127C       X127N      X128C       X128N      X129C ## 1 0.12283431 0.08045915 0.070804055 0.09386901 0.051815695 0.13034383 ## 2 0.35268185 0.14162381 0.167523880 0.07843497 0.071087436 0.03214548 ## 3 0.01546089 0.16142297 0.086938133 0.23120844 0.114664348 0.09610188 ## 4 0.04702854 0.09288723 0.102012167 0.11125409 0.067969116 0.14155358 ## 5 0.01044693 0.15866147 0.167315736 0.21017494 0.147946673 0.07088253 ## 6 0.04955362 0.01215244 0.002477681 0.01297833 0.002988949 0.06253195 ##        X129N       X130C      X130N       X131 ## 1 0.17540095 0.040068658 0.11478839 0.11961594 ## 2 0.06686260 0.031961793 0.02810434 0.02957384 ## 3 0.15977819 0.010127118 0.08059400 0.04370403 ## 4 0.18015910 0.035329902 0.12166589 0.10014038 ## 5 0.17555789 0.007088253 0.02884754 0.02307803 ## 6 0.01726511 0.172651119 0.37007905 0.29732174 head(rowData(hl[[\"psms\"]])) ## DataFrame with 6 rows and 18 columns ##      Sequence ProteinDescriptions NbProteins ProteinGroupAccessions ##   <character>         <character>  <integer>            <character> ## 1     SQGEIDk       Tetratrico...          1                 Q8BYY4 ## 2     YEAQGDk       Vacuolar p...          1                 P46467 ## 3     TTScDTk       C-type man...          1                 Q64449 ## 4     aEELESR       Liprin-alp...          1                 P60469 ## 5     aQEEAIk       Isoform 2 ...          2               P13597-2 ## 6    dGAVDGcR       Structural...          1                 Q6P5D8 ##   Modifications    qValue       PEP  IonScore NbMissedCleavages ##     <character> <numeric> <numeric> <integer>         <integer> ## 1 K7(TMT6ple...     0.008   0.11800        27                 0 ## 2 K7(TMT6ple...     0.001   0.01070        27                 0 ## 3 C4(Carbami...     0.008   0.11800        11                 0 ## 4 N-Term(TMT...     0.002   0.04450        24                 0 ## 5 N-Term(Car...     0.001   0.00850        36                 0 ## 6 N-Term(TMT...     0.000   0.00322        26                 0 ##   IsolationInterference IonInjectTimems Intensity    Charge      mzDa      MHDa ##               <integer>       <integer> <numeric> <integer> <numeric> <numeric> ## 1                     0              70    335000         2   503.274   1005.54 ## 2                     0              70    926000         2   520.267   1039.53 ## 3                     0              70    159000         2   521.258   1041.51 ## 4                     0              70    232000         2   531.785   1062.56 ## 5                     0              70    212000         2   537.804   1074.60 ## 6                     0              70    865000         2   539.761   1078.51 ##   DeltaMassPPM     RTmin       markers ##      <numeric> <numeric>   <character> ## 1        -0.38     24.02       unknown ## 2         0.61     18.85       unknown ## 3         1.11     10.17       unknown ## 4         0.35     29.18       unknown ## 5         1.70     25.56 Plasma mem... ## 6        -0.67     21.27 Nucleus - ... hl <- aggregateFeatures(hl, \"psms\", \"Sequence\",                         name = \"peptides\", fun = colMeans) ## Your row data contain missing values. Please read the relevant ## section(s) in the aggregateFeatures manual page regarding the effects ## of missing values on data aggregation. ## Aggregated: 1/1 hl ## An instance of class QFeatures (type: bulk) with 2 sets: ##  ##  [1] psms: SummarizedExperiment with 3010 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 2923 rows and 10 columns hl[[\"peptides\"]] ## class: SummarizedExperiment  ## dim: 2923 10  ## metadata(0): ## assays(2): assay aggcounts ## rownames(2923): aAADADVSLHNFSAR aAADPSEk ... yYSFFDLNPk YYSIASSSk ## rowData names(7): Sequence ProteinDescriptions ... markers .n ## colnames(10): X126 X127C ... X130N X131 ## colData names(0): hl <- aggregateFeatures(hl, \"peptides\", \"ProteinGroupAccessions\",                         name = \"proteins\", fun = colMeans) ## Aggregated: 1/1 hl ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 3010 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 2923 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 1596 rows and 10 columns hl[[\"proteins\"]] ## class: SummarizedExperiment  ## dim: 1596 10  ## metadata(0): ## assays(2): assay aggcounts ## rownames(1596): A2A432 A2A6Q5-3 ... Q9Z2Z9 Q9Z315 ## rowData names(3): ProteinGroupAccessions markers .n ## colnames(10): X126 X127C ... X130N X131 ## colData names(0): colData(hl) ## DataFrame with 10 rows and 0 columns hl$tag <- c(\"126\", \"127N\", \"127C\", \"128N\", \"128C\", \"129N\", \"129C\",             \"130N\", \"130C\", \"131\") colData(hl) ## DataFrame with 10 rows and 1 column ##               tag ##       <character> ## X126          126 ## X127C        127N ## X127N        127C ## X128C        128N ## X128N        128C ## X129C        129N ## X129N        129C ## X130C        130N ## X130N        130C ## X131          131"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"manipulating-feature-metadata","dir":"Articles","previous_headings":"","what":"Manipulating feature metadata","title":"Quantitative features for mass spectrometry data","text":"QFeatures package provides utility functions streamline accession manipulation feature metadata. feature metadata, generally referred rowData Bioconductor ecosystem, specific assay QFeatures object. Therefore many rowData tables assays. rowDataNames provides list element contains name rowData columns available corresponding assay. saw get rowData assay, can also extract rowData assays calling function QFeautures object directly. Similarly rowDataNames, list returned element contains rowData available corresponding assay. cases, interested extracting rowData single data table. easily performed using rbindRowData function. function automatically select columns common selected assays. can also replace add columns rowData. requires provide List names List point assay updated elements List contain DataFrames replacement values. DataFrame contains column present rowData, column get added rowData. instance, let’s add rowData variables mean protein expression well associated standard deviation. First, need create DataFrame mean expression. , create list name element proteins new data added rowData proteins assay. add list, insert back rowData. shown , new mean sd variables added rowData proteins assay. Note can also replace existing column rowData naming column name DataFrame column replace.","code":"rowDataNames(hl) ## CharacterList of length 3 ## [[\"psms\"]] Sequence ProteinDescriptions NbProteins ... RTmin markers ## [[\"peptides\"]] Sequence ProteinDescriptions NbProteins ... markers .n ## [[\"proteins\"]] ProteinGroupAccessions markers .n rowData(hl) ## DataFrameList of length 3 ## names(3): psms peptides proteins rbindRowData(hl, i = c(\"peptides\", \"proteins\")) ## DataFrame with 4519 rows and 5 columns ##            assay       rowname ProteinGroupAccessions       markers        .n ##      <character>   <character>            <character>   <character> <integer> ## 1       peptides aAADADVSLH...                 P0C7N9       unknown         1 ## 2       peptides      aAADPSEk                 Q6P9Q6       unknown         1 ## 3       peptides aAAQFLTSTW...                 Q9D7Z3 Nucleus - ...         1 ## 4       peptides aAASGAAGDk...                 A2AGT5       unknown         1 ## 5       peptides     AAAVSTEGk                 Q9ERE8       unknown         1 ## ...          ...           ...                    ...           ...       ... ## 4515    proteins        Q9Z2V5                 Q9Z2V5       unknown         1 ## 4516    proteins        Q9Z2W0                 Q9Z2W0       unknown         1 ## 4517    proteins        Q9Z2X1                 Q9Z2X1       unknown         1 ## 4518    proteins        Q9Z2Z9                 Q9Z2Z9       unknown         3 ## 4519    proteins        Q9Z315                 Q9Z315       unknown         1 dF <- DataFrame(mean = rowSums(assay(hl[[\"proteins\"]])),                 sd = rowSds(assay(hl[[\"proteins\"]]))) rowData(hl) <- List(proteins = dF) rowData(hl)[[\"proteins\"]] ## DataFrame with 1596 rows and 5 columns ##          ProteinGroupAccessions     markers        .n      mean        sd ##                     <character> <character> <integer> <numeric> <numeric> ## A2A432                   A2A432     unknown         1         1 0.0822395 ## A2A6Q5-3               A2A6Q5-3     unknown         1         1 0.0891478 ## A2A8L5                   A2A8L5     unknown         2         1 0.1009041 ## A2AF47                   A2AF47     unknown         1         1 0.0749159 ## A2AGT5                   A2AGT5     unknown         6         1 0.1065126 ## ...                         ...         ...       ...       ...       ... ## Q9Z2V5                   Q9Z2V5     unknown         1         1 0.0882136 ## Q9Z2W0                   Q9Z2W0     unknown         1         1 0.0565321 ## Q9Z2X1                   Q9Z2X1     unknown         1         1 0.1539930 ## Q9Z2Z9                   Q9Z2Z9     unknown         3         1 0.0930030 ## Q9Z315                   Q9Z315     unknown         1         1 0.1234534"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"Quantitative features for mass spectrometry data","text":"One particularity QFeatures infrastructure features constitutive assays linked aggregative relation. relation recorded creating new assays aggregateFeatures exploited subsetting QFeature feature names. example , interested Stat3B isoform Signal transducer activator transcription 3 (STAT3) accession number P42227-2. accession number corresponds feature name proteins assay. protein row computed 8 peptide rows peptides assay, resulting aggregation 8 rows psms assay. can easily visualise new QFeatures object using ggplot2 converted data.frame. See visualization vignette details data exploration QFeatures object.  repeat operation Signal transducer activator transcription 1 (STAT1) 3 (STAT3) accession numbers, namely P42227-2 P42225. obtain new QFeatures instance containing 2 proteins, 9 peptides 10 PSMS. , can readily conclude STAT1 identified single PSM/peptide. , visualise expression profiles two proteins.  subsetting feature names also available call subsetByFeature function, use pipe operator. possibly reproduce line plot.","code":"stat3 <- hl[\"P42227-2\", , ] stat3 ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 9 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 8 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 1 rows and 10 columns stat3_df <- data.frame(longForm(stat3)) stat3_df$assay <- factor(stat3_df$assay,                         levels = c(\"psms\", \"peptides\", \"proteins\")) library(\"ggplot2\") ggplot(data = stat3_df,        aes(x = colname,            y = value,            group = rowname)) +     geom_line() + geom_point() +     facet_grid(~ assay) stat <- hl[c(\"P42227-2\", \"P42225\"), , ] stat ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 10 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 9 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 2 rows and 10 columns stat_df <- data.frame(longForm(stat)) stat_df$stat3 <- ifelse(stat_df$rowname %in% stat3_df$rowname,                         \"STAT3\", \"STAT1\") stat_df$assay <- factor(stat_df$assay,                         levels = c(\"psms\", \"peptides\", \"proteins\"))  ggplot(data = stat_df,        aes(x = colname,            y = value,            group = rowname)) +     geom_line() + geom_point() +     facet_grid(stat3 ~ assay) hl |>     subsetByFeature(\"P42227-2\") ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 9 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 8 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 1 rows and 10 columns hl |>     subsetByFeature(c(\"P42227-2\", \"P42225\")) ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 10 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 9 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 2 rows and 10 columns hl |>     subsetByFeature(\"P42227-2\") |>     longForm() |>     as.data.frame() |>     ggplot(aes(x = colname,                y = value,                group = rowname)) +     geom_line() +     facet_grid(~ assay)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"filtering","dir":"Articles","previous_headings":"","what":"Filtering","title":"Quantitative features for mass spectrometry data","text":"QFeatures assays can also filtered based variables respective row data slots using filterFeatures function. filters can defined using formula interface using AnnotationFilter objects r BiocStyle::Biocpkg(\"AnnotationFilter\") package (Morgan Rainer 2019). addition pre-defined filters (SymbolFilter, ProteinIdFilter, … filter gene symbol, protein identifier, …), package allows users define arbitrary character numeric filters using VariableFilter. filter can readily applied assays’ row data slots. mito_filter return PSMs, peptides proteins annotated localising mitochondrion. qval_filter, hand, return subset PSMs, qValue variable present psms assays. q-values relevant PSMs variable dropped assays. filters can created using forumla interface:","code":"mito_filter <- VariableFilter(field = \"markers\",                               value = \"Mitochondrion\",                               condition = \"==\") mito_filter ## class: CharacterVariableFilter  ## condition: ==  ## value: Mitochondrion qval_filter <- VariableFilter(field = \"qValue\",                               value = 0.001,                               condition = \"<=\") qval_filter ## class: NumericVariableFilter  ## condition: <=  ## value: 0.001 filterFeatures(hl, mito_filter) ## 'markers' found in 3 out of 3 assay(s). ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 167 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 162 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 113 rows and 10 columns filterFeatures(hl, qval_filter) ## 'qValue' found in 1 out of 3 assay(s). ## No filter applied to the following assay(s) because one or more ## filtering variables are missing in the rowData: peptides, proteins. You ## can control whether to remove or keep the features using the 'keep' ## argument (see '?filterFeature'). ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 2466 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 0 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 0 rows and 10 columns filterFeatures(hl, ~ markers == \"Mitochondrion\") ## 'markers' found in 3 out of 3 assay(s). ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 167 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 162 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 113 rows and 10 columns filterFeatures(hl, ~ qValue <= 0.001) ## 'qValue' found in 1 out of 3 assay(s). ## No filter applied to the following assay(s) because one or more ## filtering variables are missing in the rowData: peptides, proteins. You ## can control whether to remove or keep the features using the 'keep' ## argument (see '?filterFeature'). ## An instance of class QFeatures (type: bulk) with 3 sets: ##  ##  [1] psms: SummarizedExperiment with 2466 rows and 10 columns  ##  [2] peptides: SummarizedExperiment with 0 rows and 10 columns  ##  [3] proteins: SummarizedExperiment with 0 rows and 10 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Quantitative features for mass spectrometry data","text":"","code":"## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] ggplot2_3.5.2               QFeatures_1.19.2            ##  [3] MultiAssayExperiment_1.35.3 SummarizedExperiment_1.39.0 ##  [5] Biobase_2.69.0              GenomicRanges_1.61.0        ##  [7] GenomeInfoDb_1.45.3         IRanges_2.43.0              ##  [9] S4Vectors_0.47.0            BiocGenerics_0.55.0         ## [11] generics_0.1.4              MatrixGenerics_1.21.0       ## [13] matrixStats_1.5.0           BiocStyle_2.37.0            ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.6            xfun_0.52               bslib_0.9.0             ##  [4] htmlwidgets_1.6.4       lattice_0.22-7          vctrs_0.6.5             ##  [7] tools_4.5.0             tibble_3.2.1            cluster_2.1.8.1         ## [10] pkgconfig_2.0.3         BiocBaseUtils_1.11.0    Matrix_1.7-3            ## [13] RColorBrewer_1.1-3      desc_1.4.3              lifecycle_1.0.4         ## [16] farver_2.1.2            compiler_4.5.0          stringr_1.5.1           ## [19] textshaping_1.0.1       clue_0.3-66             htmltools_0.5.8.1       ## [22] sass_0.4.10             yaml_2.3.10             lazyeval_0.2.2          ## [25] pkgdown_2.1.3.9000      pillar_1.10.2           crayon_1.5.3            ## [28] jquerylib_0.1.4         tidyr_1.3.1             MASS_7.3-65             ## [31] DelayedArray_0.35.1     cachem_1.1.0            abind_1.4-8             ## [34] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           ## [37] purrr_1.0.4             dplyr_1.1.4             reshape2_1.4.4          ## [40] bookdown_0.43           labeling_0.4.3          fastmap_1.2.0           ## [43] grid_4.5.0              cli_3.6.5               SparseArray_1.9.0       ## [46] magrittr_2.0.3          S4Arrays_1.9.0          withr_3.0.2             ## [49] scales_1.4.0            UCSC.utils_1.5.0        rmarkdown_2.29          ## [52] XVector_0.49.0          httr_1.4.7              igraph_2.1.4            ## [55] ragg_1.4.0              evaluate_1.0.3          knitr_1.50              ## [58] rlang_1.1.6             Rcpp_1.0.14             glue_1.8.0              ## [61] BiocManager_1.30.25     jsonlite_2.0.0          AnnotationFilter_1.33.0 ## [64] R6_2.6.1                plyr_1.8.9              systemfonts_1.2.3       ## [67] fs_1.6.6                ProtGenerics_1.41.0     MsCoreUtils_1.21.0"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/QFeatures.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Quantitative features for mass spectrometry data","text":"vignette distributed CC -SA license license.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"preparing-the-data","dir":"Articles","previous_headings":"","what":"Preparing the data","title":"Data visualization from a QFeatures object","text":"demonstrate data visualization QFeatures, first perform quick processing hlpsms example data. load data read QFeautres object. See processing vignette details data processing QFeatures. aggregate psms peptides, peptodes proteins. also add TMT tags used multiplex samples. data added colData QFeatures object allow us demonstrate plot data colData. dataset now ready data exploration.","code":"library(\"QFeatures\") data(hlpsms) hl <- readQFeatures(hlpsms, quantCols = 1:10, name = \"psms\") hl <- aggregateFeatures(hl, \"psms\", \"Sequence\", name = \"peptides\", fun = colMeans) ## Your row data contain missing values. Please read the relevant ## section(s) in the aggregateFeatures manual page regarding the effects ## of missing values on data aggregation. ## Aggregated: 1/1 hl <- aggregateFeatures(hl, \"peptides\", \"ProteinGroupAccessions\", name = \"proteins\", fun = colMeans) ## Aggregated: 1/1 hl$tag <- c(\"126\", \"127N\", \"127C\", \"128N\", \"128C\", \"129N\", \"129C\",             \"130N\", \"130C\", \"131\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"exploring-the-qfeatures-hierarchy","dir":"Articles","previous_headings":"","what":"Exploring the QFeatures hierarchy","title":"Data visualization from a QFeatures object","text":"QFeatures objects can contain several assays data goes processing workflow. plot function provides overview assays present dataset, showing also hierarchical relationships assays determined AssayLinks.  plot rather simple three assays, processing workflows may involve steps. feat3 example data illustrates different possible relationships: one parent one child, multiple parents one child one parent multiple children.  Note datasets may contain many assays, instance MS experiment consists hundreds batches. can lead overcrowded plot. Therefore, can also explore hierarchy assays interactive plot, supported plotly package (Sievert (2020)). can use viewer panel zoom navigate across tree(s).","code":"plot(hl) data(\"feat3\") plot(feat3) plot(hl, interactive = TRUE)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"basic-data-exploration","dir":"Articles","previous_headings":"","what":"Basic data exploration","title":"Data visualization from a QFeatures object","text":"quantitative data retrieved using assay(), feature metadata retrieved using rowData() assay interest, sample metadata retrieved using colData(). retrieved, data can supplied base R data exploration tools. examples: Plot intensities first protein. data available proteins assay.  Get distribution number peptides aggregated per protein. data available column .n protein rowData.  Get count table different tags used labeling samples. data available column tag colData.","code":"plot(assay(hl, \"proteins\")[1, ]) hist(rowData(hl)[[\"proteins\"]]$.n) table(hl$tag) ##  ##  126 127C 127N 128C 128N 129C 129N 130C 130N  131  ##    1    1    1    1    1    1    1    1    1    1"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"using-ggplot2","dir":"Articles","previous_headings":"","what":"Using ggplot2","title":"Data visualization from a QFeatures object","text":"ggplot2 powerful tool data visualization R part tidyverse package ecosystem (Wickham et al. (2019)). produces elegant publication-ready plots lines code. ggplot2 can used explore QFeatures object, similarly base functions shown . Note ggplot2 expects data.frame tibble objects whereas quantitative data QFeatures encoded matrix (matrix-like objects, see ?SummarizedExperiment) rowData colData encoded DataFrame. easily circumvented converting objects data.frames tibbles. See reproduce plot using ggplot2.  refer reader ggplot2 package website information wide variety functions package offers tutorials cheatsheets. Another useful package quantitative data exploration ComplexHeatmap (Gu, Eils, Schlesner (2016)). part Bioconductor project (Gentleman et al. (2004)) facilitates visualization matrix objects heatmap. See example plot protein data.  ComplexHeatmap also allows add row /column annotations. Let’s add predicted protein location row annotation.  advanced usage ComplexHeatmap described package reference book.","code":"library(\"ggplot2\") df <- data.frame(rowData(hl)[[\"proteins\"]]) ggplot(df) +     aes(x = .n) +     geom_histogram() library(ComplexHeatmap) Heatmap(matrix = assay(hl, \"proteins\"),         show_row_names = FALSE) ha <- rowAnnotation(markers = rowData(hl)[[\"proteins\"]]$markers) Heatmap(matrix = assay(hl, \"proteins\"),         show_row_names = FALSE,         left_annotation = ha)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"advanced-data-exploration","dir":"Articles","previous_headings":"","what":"Advanced data exploration","title":"Data visualization from a QFeatures object","text":"section, show combine single table different pieces information available QFeatures object, quantitation data, feature metadata sample metadata. QFeatures package provides longForm() function converts QFeatures object long table. Long tables useful using ggplot2 data visualization. instance, suppose want visualize distribution protein quantitation (present proteins assay) respect different acquisition tags (present colData) predicted cell location separately (present rowData assays). Furthermore, link quantitation values coming protein using lines. can plotted lines code.  longForm() allows retrieve combine available data Qfeatures object. demonstrate ease combine different pieces highlight sample specific /feature specific effects data quantitation.","code":"lf <- longForm(hl[, , \"proteins\"],                rowvars = \"markers\",                colvars = \"tag\") ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 20 sampleMap rows not in names(experiments) ggplot(data.frame(lf)) +     aes(x = tag,         y = value,         group = rowname) +     geom_line() +     facet_wrap(~ markers, scales = \"free_y\", ncol = 3)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"interactive-data-exploration","dir":"Articles","previous_headings":"","what":"Interactive data exploration","title":"Data visualization from a QFeatures object","text":"Finally, simply shiny app allows explore visualise respective assays QFeatures object. QFeatures interactive interface: heatmap peptide assay data. QFeatures interactive interface: quantitative peptide assay data. QFeatures interactive interface: peptide assay row data dropdown menu side bar allows user select assay interest, can visualised heatmap (figure @ref(fig:heatmapdisplay)), quantitative table (figure @ref(fig:assaydisplay)) row data table (figure @ref(fig:rowdatadisplay)).","code":"display(hl)"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Data visualization from a QFeatures object","text":"","code":"## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] ComplexHeatmap_2.25.0       ggplot2_3.5.2               ##  [3] QFeatures_1.19.2            MultiAssayExperiment_1.35.3 ##  [5] SummarizedExperiment_1.39.0 Biobase_2.69.0              ##  [7] GenomicRanges_1.61.0        GenomeInfoDb_1.45.3         ##  [9] IRanges_2.43.0              S4Vectors_0.47.0            ## [11] BiocGenerics_0.55.0         generics_0.1.4              ## [13] MatrixGenerics_1.21.0       matrixStats_1.5.0           ## [15] BiocStyle_2.37.0            ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.1        dplyr_1.1.4             farver_2.1.2            ##  [4] fastmap_1.2.0           lazyeval_0.2.2          digest_0.6.37           ##  [7] lifecycle_1.0.4         cluster_2.1.8.1         ProtGenerics_1.41.0     ## [10] magrittr_2.0.3          compiler_4.5.0          rlang_1.1.6             ## [13] sass_0.4.10             tools_4.5.0             igraph_2.1.4            ## [16] yaml_2.3.10             knitr_1.50              S4Arrays_1.9.0          ## [19] labeling_0.4.3          htmlwidgets_1.6.4       DelayedArray_0.35.1     ## [22] plyr_1.8.9              RColorBrewer_1.1-3      abind_1.4-8             ## [25] withr_3.0.2             purrr_1.0.4             desc_1.4.3              ## [28] colorspace_2.1-1        scales_1.4.0            iterators_1.0.14        ## [31] MASS_7.3-65             cli_3.6.5               rmarkdown_2.29          ## [34] crayon_1.5.3            ragg_1.4.0              rjson_0.2.23            ## [37] httr_1.4.7              reshape2_1.4.4          BiocBaseUtils_1.11.0    ## [40] cachem_1.1.0            stringr_1.5.1           parallel_4.5.0          ## [43] AnnotationFilter_1.33.0 BiocManager_1.30.25     XVector_0.49.0          ## [46] vctrs_0.6.5             Matrix_1.7-3            jsonlite_2.0.0          ## [49] bookdown_0.43           GetoptLong_1.0.5        clue_0.3-66             ## [52] magick_2.8.6            systemfonts_1.2.3       foreach_1.5.2           ## [55] tidyr_1.3.1             jquerylib_0.1.4         glue_1.8.0              ## [58] pkgdown_2.1.3.9000      codetools_0.2-20        shape_1.4.6.1           ## [61] stringi_1.8.7           gtable_0.3.6            UCSC.utils_1.5.0        ## [64] tibble_3.2.1            pillar_1.10.2           htmltools_0.5.8.1       ## [67] circlize_0.4.16         R6_2.6.1                textshaping_1.0.1       ## [70] doParallel_1.0.17       evaluate_1.0.3          lattice_0.22-7          ## [73] png_0.1-8               bslib_0.9.0             Rcpp_1.0.14             ## [76] SparseArray_1.9.0       xfun_0.52               MsCoreUtils_1.21.0      ## [79] fs_1.6.6                pkgconfig_2.0.3         GlobalOptions_0.1.2"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/Visualization.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Data visualization from a QFeatures object","text":"vignette distributed CC -SA license license.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"the-qfeatures-class","dir":"Articles","previous_headings":"","what":"The QFeatures class","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"QFeatures class stores data list SummarizedExperiment objects contain data processed different levels. instance, QFeatures object may contain data peptide--spectrum-match (PSM) level, peptide level protein level. call SummarizedExperiment object contained QFeatures object set. different sets often related, often share samples (columns). QFeatures automatically creates links related samples annotations (stored single colData table). Similarly, different sets often share related features (rows). instance, proteins composed peptides peptides composed PSMs. QFeatures automatically creates links related features AssayLinks object. QFeatures data class. QFeatures object contains list SummarizedExperiment ojects (see class description) SingleCellExperiment QFeatures objects","code":"library(\"QFeatures\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"converting-tabular-data","dir":"Articles","previous_headings":"","what":"Converting tabular data","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"QFeatures designed process manipulate MS-based proteomics data obtained identification quantification raw MS files. identification quantification steps generally performed dedicated software (e.g. Sage, FragPipe, Proteome Discoverer, MaxQuant, …) return set tabular data. readQFeatures() converts tabular data QFeatures object. refer tables assayData tables. distinguish two use cases: single-set case multi-set case.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"the-single-set-case","dir":"Articles","previous_headings":"Converting tabular data","what":"The single-set case","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"single-set case generate QFeatures object single SummarizedExperiment object. generally case reading data peptide protein level, samples multiplexed (e.g. using TMT) within single MS run. two types columns: Quantitative columns (quantCols): 1 n (depending technology) Feature annotations: e.g. peptide sequence, ion charge, protein name case, quantitative column contains information single sample. can schematically represented : Schematic representation data table single-set case. Quantification columns (quantCols) represented different shades red. hyperLOPIT data example data falls single-set case (see ?hlpsms details). quantCols X126, X127N, X127C, …, X130N, X130C, X131 correspond different TMT labels. toy example, 3,010 rows corresponding features (quantified PSMs) 28 columns corresponding different data fields generated MaxQuant analysis raw MS spectra. table converted QFeatures object follows: object returned readQFeatures() QFeatures object containing 1 SummarizedExperiment set. set named quants default, name psms providing name argument:","code":"data(\"hlpsms\") quantCols <- grep(\"^X\", colnames(hlpsms)) (qfSingle <- readQFeatures(hlpsms, quantCols = quantCols)) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 10 columns (qfSingle <- readQFeatures(hlpsms, quantCols = quantCols, name = \"psms\")) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 3010 rows and 10 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"the-multi-set-case","dir":"Articles","previous_headings":"Converting tabular data","what":"The multi-set case","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"multi-set case generate QFeatures object multiple SummarizedExperiment objects. generally case reading data PSM level acquired part multiple runs. case, identification quantification software concatenates results across MS runs single table. three types columns: Run identifier column (runCol): e.g. file name. Quantification columns (quantCols): 1 n (depending technology). Feature annotations: e.g. peptide sequence, ion charge, protein name. quantitative column contains information multiple samples. can schematically represented : Schematic representation data table multi-set case. Quantification columns (quantCols) coloured run shaded label. Every sample uniquely represented colour shade. Note every quantCol contains multiple samples. use hyperLOPIT data simulate acquired part multiple runs, hence falling multi-set case. MS run often identified name file generated. Note data set now column called “FileName” 3 different runs: avoid quantification column contains data multiple samples, readQFeatures() splits table mulitple set depending runCol column, given FileName: object returned readQFeatures() QFeatures object containing 3 SummarizedExperiment sets. sets automatically named based values found runCol.","code":"hlpsms$FileName <- rep(     rep(paste0(\"run\", 1:3, \".raw\"), each = 4),      length.out = nrow(hlpsms) ) (qfMulti <- readQFeatures(hlpsms, quantCols = quantCols, runCol = \"FileName\")) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] run1.raw: SummarizedExperiment with 1004 rows and 10 columns  #>  [2] run2.raw: SummarizedExperiment with 1004 rows and 10 columns  #>  [3] run3.raw: SummarizedExperiment with 1002 rows and 10 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"including-sample-annotations","dir":"Articles","previous_headings":"","what":"Including sample annotations","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"Data often comes sample annotations provide information experimental design. data generally created user. facilitate sample annotations, readQFeatures() also allows providing annotation table colData argument. Depending use case, one multiple columns required. single-set case, colData table must contain column named quantCols. colData single-set case Let’s simulate table: can now provide table readQFeatures(): convenience, quantCols argument can omitted providing colData (quantCols fetched table): annotations retrieved follows: multi-set case, colData table must contain column named quantCols column called runCol. colData multi-set case Let’s simulate annotation table based previous example duplicating table run: can provide table readQFeatures():","code":"(coldata <- DataFrame(     quantCols = quantCols,      condition = rep(c(\"A\", \"B\"), 5),      batch = rep(c(\"batch1\", \"batch2\"), each = 5) )) #> DataFrame with 10 rows and 3 columns #>    quantCols   condition       batch #>    <integer> <character> <character> #> 1          1           A      batch1 #> 2          2           B      batch1 #> 3          3           A      batch1 #> 4          4           B      batch1 #> 5          5           A      batch1 #> 6          6           B      batch2 #> 7          7           A      batch2 #> 8          8           B      batch2 #> 9          9           A      batch2 #> 10        10           B      batch2 (qfSingle <- readQFeatures(hlpsms, quantCols = quantCols, colData = coldata)) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 10 columns (qfSingle <- readQFeatures(hlpsms, colData = coldata)) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 10 columns colData(qfSingle) #> DataFrame with 10 rows and 3 columns #>       quantCols   condition       batch #>       <integer> <character> <character> #> X126          1           A      batch1 #> X127C         2           B      batch1 #> X127N         3           A      batch1 #> X128C         4           B      batch1 #> X128N         5           A      batch1 #> X129C         6           B      batch2 #> X129N         7           A      batch2 #> X130C         8           B      batch2 #> X130N         9           A      batch2 #> X131         10           B      batch2 coldataMulti <- DataFrame() for (run in paste0(\"run\", 1:3, \".raw\")) {     coldataMulti <- rbind(coldataMulti, DataFrame(runCol = run, coldata)) } coldataMulti #> DataFrame with 30 rows and 4 columns #>          runCol quantCols   condition       batch #>     <character> <integer> <character> <character> #> 1      run1.raw         1           A      batch1 #> 2      run1.raw         2           B      batch1 #> 3      run1.raw         3           A      batch1 #> 4      run1.raw         4           B      batch1 #> 5      run1.raw         5           A      batch1 #> ...         ...       ...         ...         ... #> 26     run3.raw         6           B      batch2 #> 27     run3.raw         7           A      batch2 #> 28     run3.raw         8           B      batch2 #> 29     run3.raw         9           A      batch2 #> 30     run3.raw        10           B      batch2 (qfMulti <- readQFeatures(     hlpsms, quantCols = quantCols, colData = coldataMulti,      runCol = \"FileName\" )) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] run1.raw: SummarizedExperiment with 1004 rows and 10 columns  #>  [2] run2.raw: SummarizedExperiment with 1004 rows and 10 columns  #>  [3] run3.raw: SummarizedExperiment with 1002 rows and 10 columns"},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"sample-names","dir":"Articles","previous_headings":"Additional information","what":"Sample names","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"readQFeatures() automatically assigns names unique across samples sets. single-set case, sample names provided quantCols. multi-set case, sample names concatenation run name quantCols (separated _).","code":"colnames(qfSingle) #> CharacterList of length 1 #> [[\"quants\"]] X126 X127C X127N X128C X128N X129C X129N X130C X130N X131 colnames(qfMulti) #> CharacterList of length 3 #> [[\"run1.raw\"]] run1.raw_X126 run1.raw_X127C ... run1.raw_X130N run1.raw_X131 #> [[\"run2.raw\"]] run2.raw_X126 run2.raw_X127C ... run2.raw_X130N run2.raw_X131 #> [[\"run3.raw\"]] run3.raw_X126 run3.raw_X127C ... run3.raw_X130N run3.raw_X131"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"special-case-empty-samples","dir":"Articles","previous_headings":"Additional information","what":"Special case: empty samples","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"rare cases, can beneficial remove samples quantifications NA. can occur raw data searched labels used experiment. instance, may quantifying raw data expecting TMT-16 labelling experiment used TMT-11 labels, used half TMT-16 labels. missing label channels filled NAs. setting removeEmptyCols = TRUE, readQFeatures() automatically detects removes columns containing NAs. Note set values X126 missing. Hence, set contains 9 columns instead previous 10.","code":"hlpsms$X126 <- NA (qfNoEmptyCol <- readQFeatures(     hlpsms, quantCols = quantCols, removeEmptyCols = TRUE )) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 9 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"reducing-verbose","dir":"Articles","previous_headings":"Additional information","what":"Reducing verbose","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"Every call readQFeatures() prints progression console. disable console output, can use verbose argument:","code":"(qfSingle <- readQFeatures(     hlpsms, quantCols = quantCols, verbose = FALSE )) #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 10 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"under-the-hood","dir":"Articles","previous_headings":"","what":"Under the hood","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"readQFeatures proceeds follows: assayData table must provided data.frame (format can coerced data.frame). readQFeatures() converts table SingleCellExperiment object using quantCols identify quantitative values stored assay slot. column considered feature annotation stored rowData. Step1: Convert input table SingleCellExperiment object (multi-set case:) SingleCellExperiment object split according acquisition run provided runCol column assayData. Step2: Split acquisition run sample annotations generated. colData provided, sample annotations empty. Otherwise, readQFeatures() matches information assayData colData based quantCols (single-set case) quantCols runCol (multi-set case). Sample annotations stored colData slot QFeatures object. Step3: Adding matching sample annotations Finally, SummarizedExperiment sets colData converted QFeatures object. Step4: Converting QFeatures","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"what-about-other-input-formats","dir":"Articles","previous_headings":"","what":"What about other input formats?","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"readQFeatures() work PSM quantification table output pre-processing software. instance, can easily import PSM tables generated Proteome Discoverer. run names contained File ID column (supplied runCol argument readQFeatures()). quantification columns contained columns starting Abundance, eventually followed multiplexing tag name. columns stored dedicated column colData data supplied runCol readQFeatures(). QFeatures package meant label-free multiplexed proteomics data. Importing LFQ data similar examples difference quantCols 1 element. readSCPfromDIANN() function adapted import label-free plexDIA/mTRAQ Report.tsv files generated DIA-NN. information, see ?readQFeatures() ?readQFeaturesFromDIANN() manual pages, described main principle concern data import formatting. input loaded using procedure described vignette, can submit feature request (see next section).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"need-help","dir":"Articles","previous_headings":"","what":"Need help?","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"can open issue GitHub repository case troubles loading data readQFeatures(). suggestion feature request function documentation also warmly welcome.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"","code":"R version 4.5.0 (2025-04-11) Platform: x86_64-pc-linux-gnu Running under: Ubuntu 24.04.2 LTS  Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0  locale:  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C                [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8      [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8     [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                   [9] LC_ADDRESS=C               LC_TELEPHONE=C             [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C         time zone: UTC tzcode source: system (glibc)  attached base packages: [1] stats4    stats     graphics  grDevices utils     datasets  methods   [8] base       other attached packages:  [1] DT_0.33                     QFeatures_1.19.2             [3] MultiAssayExperiment_1.35.3 SummarizedExperiment_1.39.0  [5] Biobase_2.69.0              GenomicRanges_1.61.0         [7] GenomeInfoDb_1.45.3         IRanges_2.43.0               [9] S4Vectors_0.47.0            BiocGenerics_0.55.0         [11] generics_0.1.4              MatrixGenerics_1.21.0       [13] matrixStats_1.5.0           BiocStyle_2.37.0             loaded via a namespace (and not attached):  [1] xfun_0.52               bslib_0.9.0             htmlwidgets_1.6.4        [4] lattice_0.22-7          crosstalk_1.2.1         vctrs_0.6.5              [7] tools_4.5.0             tibble_3.2.1            cluster_2.1.8.1         [10] pkgconfig_2.0.3         BiocBaseUtils_1.11.0    Matrix_1.7-3            [13] desc_1.4.3              lifecycle_1.0.4         compiler_4.5.0          [16] stringr_1.5.1           textshaping_1.0.1       clue_0.3-66             [19] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             [22] lazyeval_0.2.2          pkgdown_2.1.3.9000      pillar_1.10.2           [25] crayon_1.5.3            jquerylib_0.1.4         tidyr_1.3.1             [28] MASS_7.3-65             DelayedArray_0.35.1     cachem_1.1.0            [31] abind_1.4-8             tidyselect_1.2.1        digest_0.6.37           [34] stringi_1.8.7           purrr_1.0.4             dplyr_1.1.4             [37] reshape2_1.4.4          bookdown_0.43           fastmap_1.2.0           [40] grid_4.5.0              cli_3.6.5               SparseArray_1.9.0       [43] magrittr_2.0.3          S4Arrays_1.9.0          UCSC.utils_1.5.0        [46] rmarkdown_2.29          XVector_0.49.0          httr_1.4.7              [49] igraph_2.1.4            ragg_1.4.0              evaluate_1.0.3          [52] knitr_1.50              rlang_1.1.6             Rcpp_1.0.14             [55] glue_1.8.0              BiocManager_1.30.25     jsonlite_2.0.0          [58] AnnotationFilter_1.33.0 R6_2.6.1                plyr_1.8.9              [61] systemfonts_1.2.3       fs_1.6.6                ProtGenerics_1.41.0     [64] MsCoreUtils_1.21.0"},{"path":"https://rformassspectrometry.github.io/QFeatures/articles/read_QFeatures.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"Load mass spectrometry-based proteomics data using `readQFeatures()`","text":"vignette distributed CC -SA license license.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laurent Gatto. Author, maintainer. Christophe Vanderaa. Author. Léopold Guyot. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gatto L, Vanderaa C (2025). QFeatures: Quantitative features mass spectrometry data. R package version 1.19.2, https://github.com/RforMassSpectrometry/QFeatures.","code":"@Manual{,   title = {QFeatures: Quantitative features for mass spectrometry data},   author = {Laurent Gatto and Christophe Vanderaa},   year = {2025},   note = {R package version 1.19.2},   url = {https://github.com/RforMassSpectrometry/QFeatures}, }"},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/index.html","id":"what-is-qfeatures","dir":"","previous_headings":"Quantitative features for mass spectrometry data","what":"What is QFeatures?","title":"Quantitative features for mass spectrometry data","text":"QFeatures Bioconductor package provides infrastructure management process quantitative features high-throughput mass spectrometry-based proteomics assays. provides familiar Bioconductor user experience manage quantitative data across different assay levels (precursors, peptide spectrum matches, peptides proteins protein groups) coherent tractable format. familiar MSnbase package, QFeatures summarised : Evolving MSnSet data towards SummarizedExperiment, proteomics data.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/index.html","id":"getting-started","dir":"","previous_headings":"Quantitative features for mass spectrometry data","what":"Getting started","title":"Quantitative features for mass spectrometry data","text":"QFeatures class used manage process quantitative features high-throughput mass spectrometry assays. See QFeatures introduction get started Processing quantitative proteomics data QFeatures vignette real-life application. Visualisation quantitative mass spectrometry data contained QFeatures object illustrated Data visualisation vignette.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/index.html","id":"license","dir":"","previous_headings":"Quantitative features for mass spectrometry data","what":"License","title":"Quantitative features for mass spectrometry data","text":"QFeatures code provided permissive Artistic 2.0 license. documentation, including manual pages vignettes, distributed CC -SA license.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AllGenerics.html","id":null,"dir":"Reference","previous_headings":"","what":"Placeholder for generics functions documentation — AllGenerics","title":"Placeholder for generics functions documentation — AllGenerics","text":"Placeholder generics functions documentation","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Links between Assays — AssayLinks","title":"Links between Assays — AssayLinks","text":"Links assays within QFeatures object handled AssayLinks object. composed list AssayLink instances.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Links between Assays — AssayLinks","text":"","code":"# S4 method for class 'AssayLink' show(object)  # S4 method for class 'AssayLinks' updateObject(object, ..., verbose = FALSE)  # S4 method for class 'AssayLink' updateObject(object, ..., verbose = FALSE)  AssayLink(name, from = NA_character_, fcol = NA_character_, hits = Hits())  AssayLinks(..., names = NULL)  assayLink(x, i)  assayLinks(x, i)  # S4 method for class 'AssayLink,character,ANY,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'AssayLinks,list,ANY,ANY' x[i, j, ..., drop = TRUE]  addAssayLink(object, from, to, varFrom, varTo)  addAssayLinkOneToOne(object, from, to)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Links between Assays — AssayLinks","text":"object AssayLink object show. ... set AssayLink objects list thereof. verbose logical (default FALSE) whether print extra messages name mandatory name assay(s). character() integer() indicating assay(s) link object fcol feature variable parent assay used generate current assay (used aggregateFeatures). NA_character_, applicable. hits object class S4Vectors::Hits matching features two assays. names character() AssayLink names. provided, ... ignored, names used create AssayLinks object AssayLink instances names names. x instance class QFeatures. index name assay whose AssayLink parents AssayLink instances returned. [, feature names filter . j ignored. drop ignored. character(1) integer(1) indicating assay link object varFrom character() indicating feature variable(s) use match assay(s) assay. varFrom must length assumed ordered . varTo character(1) indicating feature variable use match assay assay(s).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Links between Assays — AssayLinks","text":"assayLink returns instance class AssayLink. assayLinks returns instance class AssayLinks.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Links between Assays — AssayLinks","text":"Object can created AssayLink() AssayLinks() constructors.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"methods-and-functions","dir":"Reference","previous_headings":"","what":"Methods and functions","title":"Links between Assays — AssayLinks","text":"assayLink(x, ) accesses AssayLink position name QFeatures object x. parentAssayLinks(x, , recursive = FALSE) accesses parent(s) AssayLinks assay index name .","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"creating-links-between-assays","dir":"Reference","previous_headings":"","what":"Creating links between assays","title":"Links between Assays — AssayLinks","text":"addAssayLink takes parent assay child assay contained QFeatures object creates link given matching feature variable assay's rowData. addAssayLink also allows link assay multiple parent assays (see examples ). addAssayLinkOneToOne links two assays contained QFeatures object. parent assay child assay must size contain rownames (different ordering allowed). matching performed based row names assays, instead supplied variable name rowData. Providing multiple parents supported.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/AssayLinks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Links between Assays — AssayLinks","text":"","code":"##----------------------------- ## Creating an AssayLink object ##-----------------------------  al1 <- AssayLink(name = \"assay1\") al1 #> AssayLink for assay <assay1> #> [from:NA|fcol:NA|hits:0]  ##------------------------------ ## Creating an AssayLinks object ##------------------------------  AssayLinks(al1) #> AssayLinks of length 1 #> names(1): assay1  al2 <- AssayLinks(names = c(\"Assay1\", \"Assay2\")) al2 #> AssayLinks of length 2 #> names(2): Assay1 Assay2  ##--------------------------------------- ## Adding an AssayLink between two assays ##---------------------------------------  ## create a QFeatures object with 2 (identical) assays ## see also '?QFeatures' se <- SummarizedExperiment(matrix(runif(20), ncol = 2,                                   dimnames = list(LETTERS[1:10],                                                   letters[1:2])),                            rowData = DataFrame(ID = 1:10)) ft <- QFeatures(list(assay1 = se, assay2 = se))  ## assay1 and assay2 are not linked assayLink(ft, \"assay2\") ## 'from' is NA #> AssayLink for assay <assay2> #> [from:NA|fcol:NA|hits:0] assayLink(ft, \"assay1\") ## 'from' is NA #> AssayLink for assay <assay1> #> [from:NA|fcol:NA|hits:0]  ## Suppose assay2 was generated from assay1 and the feature variable ## 'ID' keeps track of the relationship between the two assays ftLinked <- addAssayLink(ft, from = \"assay1\", to = \"assay2\",                          varFrom = \"ID\", varTo = \"ID\") assayLink(ftLinked, \"assay2\") #> AssayLink for assay <assay2> #> [from:assay1|fcol:ID|hits:10]  ## For one-to-one relationships, you can also use ftLinked <- addAssayLinkOneToOne(ft, from = \"assay1\", to = \"assay2\") assayLink(ftLinked, \"assay2\") #> AssayLink for assay <assay2> #> [from:assay1|fcol:._oneToOne|hits:10]  ##---------------------------------------- ## Adding an AssayLink between more assays ##----------------------------------------  ## An assay can also be linked to multiple parent assays ## Create a QFeatures object with 2 parent assays and 1 child assay ft <- QFeatures(list(parent1 = se[1:6, ], parent2 = se[4:10, ], child = se)) ft <- addAssayLink(ft, from = c(\"parent1\", \"parent2\"), to = \"child\",                    varFrom = c(\"ID\", \"ID\"), varTo = \"ID\") assayLink(ft, \"child\") #> AssayLink for assay <child> #> [from:parent1,parent2|fcol:ID,ID|hits:6,7]"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate assays' quantitative features — aggregateFeatures","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"function aggregates quantitative features one multiple assays, applying summarisation function (fun) sets features. fcol variable name points rowData column defines group features aggregate. variable can eigher vector (refer aggregation vector) adjacency matrix (aggregation matrix). rowData aggregated SummarizedExperiment assays contains .n variable provides number parent features aggregated. aggregating vector, newly aggregated SummarizedExperiment assays also contains new aggcounts assay containing aggregation counts matrix, .e. number features aggregated sample, can accessed aggcounts() accessor. rowData columns invariant within group across assays retained new assays' rowData.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"","code":"# S4 method for class 'QFeatures' aggregateFeatures(   object,   i,   fcol,   name = \"newAssay\",   fun = MsCoreUtils::robustSummary,   ... )  # S4 method for class 'SummarizedExperiment' aggregateFeatures(object, fcol, fun = MsCoreUtils::robustSummary, ...)  # S4 method for class 'QFeatures' adjacencyMatrix(object, i, adjName = \"adjacencyMatrix\")  adjacencyMatrix(object, i, adjName = \"adjacencyMatrix\") <- value  # S4 method for class 'SummarizedExperiment' aggcounts(object, ...)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"object instance class SummarizedExperiment QFeatures. adding adjacency matrix assay QFeatures object, index name assay adjacency matrix added . Ignored x SummarizedExperiment. fcol character(1) naming rowdata variable (assay case QFeatures) defining aggregate features assays. variable either character (possibly sparse) matrix. See details. name character() naming new assays. name must length . Default newAssay. Note function fail already assay name. fun function used quantitative feature aggregation. See Details examples. ... Additional parameters passed fun. adjName character(1) variable name containing adjacency matrix. Default \"adjacencyMatrix\". value adjacency matrix row column names. matrix coerced compressed, column-oriented sparse matrix (class dgCMatrix) defined Matrix package, generaled sparseMatrix() constructor.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"QFeatures object additional assay SummarizedExperiment object (subclass thereof).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"Aggregation performed function takes matrix input returns vector length equal ncol(x). Examples thereof MsCoreUtils::medianPolish() fits additive model (two way decomposition) using Tukey's median polish_ procedure using stats::medpolish(); MsCoreUtils::robustSummary() calculate robust aggregation using MASS::rlm() (default); base::colMeans() use mean column; colMeansMat(x, MAT) aggregate feature calculating mean peptide intensities via adjacency matrix. Shared peptides re-used multiple times. matrixStats::colMedians() use median column. base::colSums() use sum column; colSumsMat(x, MAT) aggregate feature summing peptide intensities protein via adjacency matrix. Shared peptides re-used multiple times. See MsCoreUtils::aggregate_by_vector() aggregation functions.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"missing-quantitative-values","dir":"Reference","previous_headings":"","what":"Missing quantitative values","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"Missing quantitative values different effects based aggregation method employed: aggregation functions able deal missing values either ignoring propagating . often done na.rm argument, can passed .... example, rowSums, rowMeans, rowMedians, ... ignore NA values na.rm = TRUE, illustrated . Missing values result error using medpolish, unless na.rm = TRUE used. Note option relies implicit assumptions /performes implicit imputation: summing, values implicitly imputed 0, assuming NA represent trully absent features; averaging, assumption NA represented genuinely missing value. using robust summarisation, individual missing values excluded prior fitting linear model robust regression. remove values feature containing missing values, use filterNA(). generally, missing values often need dedicated handling filtering (see filterNA()) imputation (see impute()).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"missing-values-in-the-row-data","dir":"Reference","previous_headings":"","what":"Missing values in the row data","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"Missing values row data assay also impact resulting (aggregated) assay row data, illustrated example . feature variables (column row data) containing NA values dropped aggregated row data. reasons underlying drop detailed reduceDataFrame() manual page: invariant aggregated rows, .e. rows resulting aggregation identical variables, preserved aggregations. situation illustrated however happen rare cases often imputable using value aggregation rows aggregation preserve invariant nature column. cases NA present otherwise variant column, column dropped anyway.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"using-an-adjacency-matrix","dir":"Reference","previous_headings":"","what":"Using an adjacency matrix","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"considering non-unique peptides explicitly, .e. peptides map multiple proteins rather protein group, convenient encode ambiguity explicitly using peptide--proteins (sparse) adjacency matrix. matrix typically stored rowdata set/retrieved adjacencyMatrix() function. can created manually (illustrated ) using PSMatch::makeAdjacencyMatrix().","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate assays' quantitative features — aggregateFeatures","text":"","code":"## --------------------------------------- ## An example QFeatures with PSM-level data ## --------------------------------------- data(feat1) feat1 #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns   ## Aggregate PSMs into peptides feat1 <- aggregateFeatures(feat1, \"psms\", \"Sequence\", name = \"peptides\") #>  Aggregated: 1/1 feat1 #> An instance of class QFeatures (type: bulk) with 2 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns   ## Aggregate peptides into proteins feat1 <- aggregateFeatures(feat1, \"peptides\", \"Protein\", name = \"proteins\") #>  Aggregated: 1/1 feat1 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 2 rows and 2 columns   assay(feat1[[1]]) #>       S1 S2 #> PSM1   1 11 #> PSM2   2 12 #> PSM3   3 13 #> PSM4   4 14 #> PSM5   5 15 #> PSM6   6 16 #> PSM7   7 17 #> PSM8   8 18 #> PSM9   9 19 #> PSM10 10 20 assay(feat1[[2]]) #>              S1   S2 #> ELGNDAYK    5.0 15.0 #> IAEESNFPFIK 8.5 18.5 #> SYGFNAAR    2.0 12.0 aggcounts(feat1[[2]]) #>             S1 S2 #> ELGNDAYK     3  3 #> IAEESNFPFIK  4  4 #> SYGFNAAR     3  3 assay(feat1[[3]]) #>        S1   S2 #> ProtA 3.5 13.5 #> ProtB 8.5 18.5 aggcounts(feat1[[3]]) #>       S1 S2 #> ProtA  2  2 #> ProtB  1  1  ## -------------------------------------------- ## Aggregation with missing quantitative values ## -------------------------------------------- data(ft_na) ft_na #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] na: SummarizedExperiment with 4 rows and 3 columns   assay(ft_na[[1]]) #>    A  B  C #> a NA  5  9 #> b  2  6 10 #> c  3 NA 11 #> d NA  8 12 rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1           A #> b         2           B #> c         1           A #> d         2           B  ## By default, missing values are propagated ft2 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 assay(ft2[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 aggcounts(ft2[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2  ## The rowData .n variable tallies number of initial rows that ## were aggregated (irrespective of NAs) for all the samples. rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2  ## Ignored when setting na.rm = TRUE ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums, na.rm = TRUE) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 assay(ft3[[2]]) #>   A  B  C #> 1 3  5 20 #> 2 2 14 22 aggcounts(ft3[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2  ## ----------------------------------------------- ## Aggregation with missing values in the row data ## ----------------------------------------------- ## Row data results without any NAs, which includes the ## Y variables rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2  ## Missing value in the Y feature variable rowData(ft_na[[1]])[1, \"Y\"] <- NA rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1          NA #> b         2           B #> c         1           A #> d         2           B  ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative and row data contain missing values. Please read the #> relevant section(s) in the aggregateFeatures manual page regarding the #> effects of missing values on data aggregation. #>  Aggregated: 1/1 ## The Y feature variable has been dropped! assay(ft3[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 rowData(ft3[[2]]) #> DataFrame with 2 rows and 2 columns #>           X        .n #>   <integer> <integer> #> 1         1         2 #> 2         2         2  ## -------------------------------------------- ## Using a peptide-by-proteins adjacency matrix ## --------------------------------------------  ## Let's use assay peptides from object feat1 and ## define that peptide SYGFNAAR maps to proteins ## Prot A and B  se <- feat1[[\"peptides\"]] rowData(se)$Protein[3] <- c(\"ProtA;ProtB\") rowData(se) #> DataFrame with 3 rows and 4 columns #>                  Sequence       Protein      location        .n #>               <character>   <character>   <character> <integer> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3  ## This can also be defined using anadjacency matrix, manual ## encoding here. See PSMatch::makeAdjacencyMatrix() for a ## function that does it automatically. adj <- matrix(0, nrow = 3, ncol = 2,               dimnames = list(rownames(se),                               c(\"ProtA\", \"ProtB\"))) adj[1, 1] <- adj[2, 2] <- adj[3, 1:2] <- 1 adj #>             ProtA ProtB #> ELGNDAYK        1     0 #> IAEESNFPFIK     0     1 #> SYGFNAAR        1     1  adjacencyMatrix(se) <- adj rowData(se) #> DataFrame with 3 rows and 5 columns #>                  Sequence       Protein      location        .n adjacencyMatrix #>               <character>   <character>   <character> <integer>     <dgCMatrix> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3             1:0 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4             0:1 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3             1:1 adjacencyMatrix(se) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>             ProtA ProtB #> ELGNDAYK        1     . #> IAEESNFPFIK     .     1 #> SYGFNAAR        1     1  ## Aggregation using the adjacency matrix se2 <- aggregateFeatures(se, fcol = \"adjacencyMatrix\",                          fun = MsCoreUtils::colMeansMat)  ## Peptide SYGFNAAR was taken into account in both ProtA and ProtB ## aggregations. assay(se2) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25   ## Aggregation by matrix on a QFeature object works as with a ## vector ft <- QFeatures(list(peps = se)) ft <- aggregateFeatures(ft, \"peps\", \"adjacencyMatrix\", name = \"protsByMat\",                         fun = MsCoreUtils::colMeansMat) #>  Aggregated: 1/1 assay(ft[[2]]) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25 rowData(ft[[2]]) #> DataFrame with 2 rows and 1 column #>              .n #>       <integer> #> ProtA         2 #> ProtB         2"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative MS QFeatures — QFeatures","title":"Quantitative MS QFeatures — QFeatures","text":"Conceptually, QFeatures object holds set assays, composed matrix (array) containing quantitative data row annotations (meta-data).  number names columns (samples) must always across assays, number names rows (features) can vary. assays typically defined SummarizedExperiment objects. addition, QFeatures object also uses single DataFrame annotate samples (columns) represented matrices. QFeatures class extends MultiAssayExperiment::MultiAssayExperiment inherits functionality MultiAssayExperiment::MultiAssayExperiment class. typical use case QFeatures object represent quantitative proteomics (metabolomics) data, different assays represent quantitation data PSM (main assay), peptide protein level, peptide values computed PSM data, protein-level data calculated based peptide-level values. largest assay (one highest number features, PSMs example ) considered main assay. recommended way create QFeatures objects use readQFeatures() function, creates instance tabular data. QFeatures constructor can used create objects bare parts.  user's responsability make sure match class validity requirements.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative MS QFeatures — QFeatures","text":"","code":"QFeatures(..., assayLinks = NULL)  # S4 method for class 'QFeatures' show(object)  # S3 method for class 'QFeatures' plot(x, interactive = FALSE, ...)  # S4 method for class 'QFeatures,ANY,ANY,ANY' x[i, j, ..., drop = TRUE]  # S4 method for class 'QFeatures,character,ANY,ANY' x[i, j, k, ..., drop = TRUE]  # S4 method for class 'QFeatures' c(x, ...)  # S4 method for class 'QFeatures' dims(x, use.names = TRUE)  # S4 method for class 'QFeatures' nrows(x, use.names = TRUE)  # S4 method for class 'QFeatures' ncols(x, use.names = TRUE)  # S4 method for class 'QFeatures' rowData(x, use.names = TRUE, ...)  # S4 method for class 'QFeatures,DataFrameList' rowData(x) <- value  # S4 method for class 'QFeatures,ANY' rowData(x) <- value  rbindRowData(object, i)  selectRowData(x, rowvars)  rowDataNames(x)  # S4 method for class 'QFeatures,character' names(x) <- value  addAssay(x, y, name, assayLinks)  removeAssay(x, i)  replaceAssay(x, y, i)  # S4 method for class 'QFeatures,ANY,ANY' x[[i, j, ...]] <- value  # S4 method for class 'QFeatures' updateObject(object, ..., verbose = FALSE)  dropEmptyAssays(object, dims = 1:2)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative MS QFeatures — QFeatures","text":"... See MultiAssayExperiment details. plot, arguments passed igraph::plot.igraph. assayLinks optional AssayLinks. object instance class QFeatures. x instance class QFeatures. interactive logical(1). TRUE, interactive graph generated using plotly. Else, static plot using igraph generated. recommend interactive exploration QFeatures object contains 50 assays. indexing vector. See corresponding section documentation details. j character(), logical(), numeric() vector subsetting colData rows. drop logical (default TRUE) whether drop empty assay elements ExperimentList. k character(), logical(), numeric() vector subsetting assays use.names logical(1) indicating whether rownames assay propagated corresponding rowData. value values use replacement. See corresponding section documentation details. rowvars character() names rowData variables (columns) retain assay. y object inherits SummarizedExperiment named list assays. y list, element must inherit SummarizedExperiment names list used names assays add. Hence, list names must unique overlap names assays already present x. name character(1) naming single assay. Ignored y list assays. verbose logical (default FALSE) whether print extra messages dims numeric() defines dimensions consider drop empty assays. 1 rows (.e. assays without features) 2 columns (.e. assays without samples). Default 1:2. value 1 /2 trigger error.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Quantitative MS QFeatures — QFeatures","text":"QFeatures(..., assayLinks) allows manual construction objects. user's responsability make sure comply. arguments ... documented MultiAssayExperiment::MultiAssayExperiment(). details assayLinks, see AssayLinks. example shown . readQFeatures() function constructs QFeatures object text-based spreadsheet data.frame used generate assay. See function manual page details example.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Quantitative MS QFeatures — QFeatures","text":"QFeatures class extends MultiAssayExperiment::MultiAssayExperiment class inherits accessors replacement methods. rowData method returns DataFrameList containing rowData assay QFeatures object. hand, rowData can modified using rowData(x) <- value, value list tables can coerced DFrame tables. names value point assays rowData must replaced. column names table used replace data existing rowData. column name exist, new column added rowData. rbindRowData functions returns DFrame table contains row binded rowData tables selected assays. context, character(), integer() logical() object subsetting assays. rowData variables common assays kept. rowDataNames accessor returns list rowData variable names. longForm() accessor takes QFeatures instance returns long tidy DataFrame, quantitative value reported separate line.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"adding-removing-and-replacing-assays","dir":"Reference","previous_headings":"","what":"Adding, removing and replacing assays","title":"Quantitative MS QFeatures — QFeatures","text":"aggregateFeatures() function creates new assay aggregating features existing assay. addAssay(x, y, name, assayLinks): Adds one new assay(s) y QFeatures instance x. name character(1) naming assay one assay provided, ignored y list assays. assayLinks optional AssayLinks. colData(y) automatically added colData(x) matching sample names, colnames(y). samples present x, rows colData(x) extended account new samples. aware conflicting information colData(y) colData(x) result error. removeAssay(x, ): Removes one assay(s) QFeatures instance x. context, character(), integer() logical() indicates assay(s) remove. replaceAssay(x, y, ): Replaces one assay(s) QFeatures instance x. context, character(), integer() logical() indicates assay(s) replace. AssayLinks replaced assays automatically removed, unless replacement dimension names (columns row, order agnostic). aware conflicting information colData(y) colData(x) result error. x[[]] <- value: generic method adding (names(x)), removing (value null) replacing (names(x)). Note arguments j ... S4 replacement method signature allowed.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"subsetting","dir":"Reference","previous_headings":"","what":"Subsetting","title":"Quantitative MS QFeatures — QFeatures","text":"QFeatures object can subset using x[, j, k, drop = TRUE] paradigm. context, character(), integer(), logical() GRanges() object subsetting rows. See argument descriptions details remaining arguments. subsetByFeature() function can used subset QFeatures object using one multiple feature names matched across different assays, taking aggregation relation assays. selectRowData(x, rowvars) function can used select limited number rowData columns interest named rowvars x instance class QFeatures. variables rowvars dropped. case element rowvars found rowData variable, message printed. dropEmptyAssays(object, dims) function removes empty assays QFeatures. Empty assays defined 0 rows /0 columns, defined dims argument.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantitative MS QFeatures — QFeatures","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative MS QFeatures — QFeatures","text":"","code":"## ------------------------ ## An empty QFeatures object ## ------------------------  QFeatures() #> An empty instance of class QFeatures (type: bulk)  ## ----------------------------------- ## Creating a QFeatures object manually ## -----------------------------------  ## two assays (matrices) with matching column names m1 <- matrix(1:40, ncol = 4) m2 <- matrix(1:16, ncol = 4) sample_names <- paste0(\"S\", 1:4) colnames(m1) <- colnames(m2) <- sample_names rownames(m1) <- letters[1:10] rownames(m2) <- letters[1:4]  ## two corresponding feature metadata with appropriate row names df1 <- DataFrame(Fa = 1:10, Fb = letters[1:10],                  row.names = rownames(m1)) df2 <- DataFrame(row.names = rownames(m2))  (se1 <- SummarizedExperiment(m1, df1)) #> class: SummarizedExperiment  #> dim: 10 4  #> metadata(0): #> assays(1): '' #> rownames(10): a b ... i j #> rowData names(2): Fa Fb #> colnames(4): S1 S2 S3 S4 #> colData names(0): (se2 <- SummarizedExperiment(m2, df2)) #> class: SummarizedExperiment  #> dim: 4 4  #> metadata(0): #> assays(1): '' #> rownames(4): a b c d #> rowData names(0): #> colnames(4): S1 S2 S3 S4 #> colData names(0):  ## Sample annotation (colData) cd <- DataFrame(Var1 = rnorm(4),                 Var2 = LETTERS[1:4],                 row.names = sample_names)  el <- list(assay1 = se1, assay2 = se2) fts1 <- QFeatures(el, colData = cd) fts1 #> An instance of class QFeatures (type: bulk) with 2 sets: #>  #>  [1] assay1: SummarizedExperiment with 10 rows and 4 columns  #>  [2] assay2: SummarizedExperiment with 4 rows and 4 columns  fts1[[1]] #> class: SummarizedExperiment  #> dim: 10 4  #> metadata(0): #> assays(1): '' #> rownames(10): a b ... i j #> rowData names(2): Fa Fb #> colnames(4): S1 S2 S3 S4 #> colData names(0): fts1[[\"assay1\"]] #> class: SummarizedExperiment  #> dim: 10 4  #> metadata(0): #> assays(1): '' #> rownames(10): a b ... i j #> rowData names(2): Fa Fb #> colnames(4): S1 S2 S3 S4 #> colData names(0):  ## Rename assay names(fts1) <- c(\"se1\", \"se2\")  ## Add an assay fts1 <- addAssay(fts1, se1[1:2, ], name = \"se3\")  ## Get the assays feature metadata rowData(fts1) #> DataFrameList of length 3 #> names(3): se1 se2 se3  ## Keep only the Fa variable selectRowData(fts1, rowvars = \"Fa\") #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] se1: SummarizedExperiment with 10 rows and 4 columns  #>  [2] se2: SummarizedExperiment with 4 rows and 4 columns  #>  [3] se3: SummarizedExperiment with 2 rows and 4 columns   ## ----------------------------------- ## See ?readQFeatures to create a ## QFeatures object from a data.frame ## or spreadsheet. ## -----------------------------------"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features based on their rowData — QFeatures-filtering","title":"Filter features based on their rowData — QFeatures-filtering","text":"filterFeatures methods enables users filter features based variable rowData. features matching filter returned new object class QFeatures. filters can provided instances class AnnotationFilter (see ) formulas.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features based on their rowData — QFeatures-filtering","text":"","code":"VariableFilter(field, value, condition = \"==\", not = FALSE)  # S4 method for class 'QFeatures,AnnotationFilter' filterFeatures(object, filter, i, na.rm = FALSE, keep = FALSE, ...)  # S4 method for class 'QFeatures,formula' filterFeatures(object, filter, i, na.rm = FALSE, keep = FALSE, ...)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features based on their rowData — QFeatures-filtering","text":"field character(1) refering name variable apply filter . value character() integer() value CharacterVariableFilter NumericVariableFilter filters respectively. condition character(1) defining condition used filter. NumericVariableFilter, one \"==\", \"!=\", \">\", \"<\", \">=\" \"<=\". CharacterVariableFilter, one \"==\", \"!=\", \"startsWith\", \"endsWith\" \"contains\". Default condition \"==\". logical(1) indicating whether filtering negated . TRUE indicates negated (!). FALSE indicates negated. Default FALSE, negation. object instance class QFeatures. filter Either instance class AnnotationFilter formula. numeric, logical character vector pointing assay(s) filtered. na.rm logical(1) indicating whether missing values removed. Default FALSE. keep logical(1) indicating whether keep features assays least one filtering variables missing rowData. FALSE (default), assay contain 0 features; TRUE, assays untouched. ... Additional parameters. Currently ignored.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter features based on their rowData — QFeatures-filtering","text":"filtered QFeature object.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"the-filtering-procedure","dir":"Reference","previous_headings":"","what":"The filtering procedure","title":"Filter features based on their rowData — QFeatures-filtering","text":"filterFeatures() go assay QFeatures object apply filtering corresponding rowData. Features pass filter condition removed assay. cases, one may want filter variable present assay, . two options: either provide keep = FALSE remove features assays (thus leaving empty assay), provide keep = TRUE ignore filtering assays. features QFeatures object linked different assays AssayLinks, links automatically updated. However, note function propagate filter parent assays. example, suppose peptide assay 4 peptides linked protein assay 2 proteins (2 peptides mapped per protein) apply filterFeatures(). features pass filter except one protein. peptides mapped protein remain QFeatures object. propagation filtering rules parent assay desired, may want use x[, , ] instead (see Subsetting section ?QFeature).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"variable-filters","dir":"Reference","previous_headings":"","what":"Variable filters","title":"Filter features based on their rowData — QFeatures-filtering","text":"variable filters filters defined AnnotationFilter package. addition pre-defined filter, users can arbitrarily set field operate. arbitrary filters operate either character variables (CharacterVariableFilter objects) numerics (NumericVariableFilters objects), can created VariableFilter constructor.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter features based on their rowData — QFeatures-filtering","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-filtering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter features based on their rowData — QFeatures-filtering","text":"","code":"## ---------------------------------------- ## Creating character and numberic ## variable filters ## ----------------------------------------  VariableFilter(field = \"my_var\",                value = \"value_to_keep\",                condition = \"==\") #> class: CharacterVariableFilter  #> condition: ==  #> value: value_to_keep   VariableFilter(field = \"my_num_var\",                value = 0.05,                condition = \"<=\") #> class: NumericVariableFilter  #> condition: <=  #> value: 0.05   example(aggregateFeatures) #>  #> aggrgF> ## --------------------------------------- #> aggrgF> ## An example QFeatures with PSM-level data #> aggrgF> ## --------------------------------------- #> aggrgF> data(feat1) #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  #> aggrgF> ## Aggregate PSMs into peptides #> aggrgF> feat1 <- aggregateFeatures(feat1, \"psms\", \"Sequence\", name = \"peptides\") #>  Aggregated: 1/1 #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 2 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns  #>  #> aggrgF> ## Aggregate peptides into proteins #> aggrgF> feat1 <- aggregateFeatures(feat1, \"peptides\", \"Protein\", name = \"proteins\") #>  Aggregated: 1/1 #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 2 rows and 2 columns  #>  #> aggrgF> assay(feat1[[1]]) #>       S1 S2 #> PSM1   1 11 #> PSM2   2 12 #> PSM3   3 13 #> PSM4   4 14 #> PSM5   5 15 #> PSM6   6 16 #> PSM7   7 17 #> PSM8   8 18 #> PSM9   9 19 #> PSM10 10 20 #>  #> aggrgF> assay(feat1[[2]]) #>              S1   S2 #> ELGNDAYK    5.0 15.0 #> IAEESNFPFIK 8.5 18.5 #> SYGFNAAR    2.0 12.0 #>  #> aggrgF> aggcounts(feat1[[2]]) #>             S1 S2 #> ELGNDAYK     3  3 #> IAEESNFPFIK  4  4 #> SYGFNAAR     3  3 #>  #> aggrgF> assay(feat1[[3]]) #>        S1   S2 #> ProtA 3.5 13.5 #> ProtB 8.5 18.5 #>  #> aggrgF> aggcounts(feat1[[3]]) #>       S1 S2 #> ProtA  2  2 #> ProtB  1  1 #>  #> aggrgF> ## -------------------------------------------- #> aggrgF> ## Aggregation with missing quantitative values #> aggrgF> ## -------------------------------------------- #> aggrgF> data(ft_na) #>  #> aggrgF> ft_na #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] na: SummarizedExperiment with 4 rows and 3 columns  #>  #> aggrgF> assay(ft_na[[1]]) #>    A  B  C #> a NA  5  9 #> b  2  6 10 #> c  3 NA 11 #> d NA  8 12 #>  #> aggrgF> rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1           A #> b         2           B #> c         1           A #> d         2           B #>  #> aggrgF> ## By default, missing values are propagated #> aggrgF> ft2 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft2[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 #>  #> aggrgF> aggcounts(ft2[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2 #>  #> aggrgF> ## The rowData .n variable tallies number of initial rows that #> aggrgF> ## were aggregated (irrespective of NAs) for all the samples. #> aggrgF> rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2 #>  #> aggrgF> ## Ignored when setting na.rm = TRUE #> aggrgF> ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums, na.rm = TRUE) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft3[[2]]) #>   A  B  C #> 1 3  5 20 #> 2 2 14 22 #>  #> aggrgF> aggcounts(ft3[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2 #>  #> aggrgF> ## ----------------------------------------------- #> aggrgF> ## Aggregation with missing values in the row data #> aggrgF> ## ----------------------------------------------- #> aggrgF> ## Row data results without any NAs, which includes the #> aggrgF> ## Y variables #> aggrgF> rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2 #>  #> aggrgF> ## Missing value in the Y feature variable #> aggrgF> rowData(ft_na[[1]])[1, \"Y\"] <- NA #>  #> aggrgF> rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1          NA #> b         2           B #> c         1           A #> d         2           B #>  #> aggrgF> ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative and row data contain missing values. Please read the #> relevant section(s) in the aggregateFeatures manual page regarding the #> effects of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> ## The Y feature variable has been dropped! #> aggrgF> assay(ft3[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 #>  #> aggrgF> rowData(ft3[[2]]) #> DataFrame with 2 rows and 2 columns #>           X        .n #>   <integer> <integer> #> 1         1         2 #> 2         2         2 #>  #> aggrgF> ## -------------------------------------------- #> aggrgF> ## Using a peptide-by-proteins adjacency matrix #> aggrgF> ## -------------------------------------------- #> aggrgF>  #> aggrgF> ## Let's use assay peptides from object feat1 and #> aggrgF> ## define that peptide SYGFNAAR maps to proteins #> aggrgF> ## Prot A and B #> aggrgF>  #> aggrgF> se <- feat1[[\"peptides\"]] #>  #> aggrgF> rowData(se)$Protein[3] <- c(\"ProtA;ProtB\") #>  #> aggrgF> rowData(se) #> DataFrame with 3 rows and 4 columns #>                  Sequence       Protein      location        .n #>               <character>   <character>   <character> <integer> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3 #>  #> aggrgF> ## This can also be defined using anadjacency matrix, manual #> aggrgF> ## encoding here. See PSMatch::makeAdjacencyMatrix() for a #> aggrgF> ## function that does it automatically. #> aggrgF> adj <- matrix(0, nrow = 3, ncol = 2, #> aggrgF+               dimnames = list(rownames(se), #> aggrgF+                               c(\"ProtA\", \"ProtB\"))) #>  #> aggrgF> adj[1, 1] <- adj[2, 2] <- adj[3, 1:2] <- 1 #>  #> aggrgF> adj #>             ProtA ProtB #> ELGNDAYK        1     0 #> IAEESNFPFIK     0     1 #> SYGFNAAR        1     1 #>  #> aggrgF> adjacencyMatrix(se) <- adj #>  #> aggrgF> rowData(se) #> DataFrame with 3 rows and 5 columns #>                  Sequence       Protein      location        .n adjacencyMatrix #>               <character>   <character>   <character> <integer>     <dgCMatrix> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3             1:0 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4             0:1 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3             1:1 #>  #> aggrgF> adjacencyMatrix(se) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>             ProtA ProtB #> ELGNDAYK        1     . #> IAEESNFPFIK     .     1 #> SYGFNAAR        1     1 #>  #> aggrgF> ## Aggregation using the adjacency matrix #> aggrgF> se2 <- aggregateFeatures(se, fcol = \"adjacencyMatrix\", #> aggrgF+                          fun = MsCoreUtils::colMeansMat) #>  #> aggrgF> ## Peptide SYGFNAAR was taken into account in both ProtA and ProtB #> aggrgF> ## aggregations. #> aggrgF> assay(se2) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25 #>  #> aggrgF> ## Aggregation by matrix on a QFeature object works as with a #> aggrgF> ## vector #> aggrgF> ft <- QFeatures(list(peps = se)) #>  #> aggrgF> ft <- aggregateFeatures(ft, \"peps\", \"adjacencyMatrix\", name = \"protsByMat\", #> aggrgF+                         fun = MsCoreUtils::colMeansMat) #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft[[2]]) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25 #>  #> aggrgF> rowData(ft[[2]]) #> DataFrame with 2 rows and 1 column #>              .n #>       <integer> #> ProtA         2 #> ProtB         2  ## ---------------------------------------------------------------- ## Filter all features that are associated to the Mitochondrion in ## the location feature variable. This variable is present in all ## assays. ## ----------------------------------------------------------------  ## using the forumla interface, exact mathc filterFeatures(feat1, ~  location == \"Mitochondrion\") #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## using the forumula intefrace, martial match filterFeatures(feat1, ~startsWith(location, \"Mito\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## using a user-defined character filter filterFeatures(feat1, VariableFilter(\"location\", \"Mitochondrion\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## using a user-defined character filter with partial match filterFeatures(feat1, VariableFilter(\"location\", \"Mito\", \"startsWith\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns  filterFeatures(feat1, VariableFilter(\"location\", \"itochon\", \"contains\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## ---------------------------------------------------------------- ## Filter all features that aren't marked as unknown (sub-cellular ## location) in the feature variable ## ----------------------------------------------------------------  ## using a user-defined character filter filterFeatures(feat1, VariableFilter(\"location\", \"unknown\", condition = \"!=\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## using the forumula interface filterFeatures(feat1, ~ location != \"unknown\") #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns   ## ---------------------------------------------------------------- ## Filter features that have a p-values lower or equal to 0.03 ## ----------------------------------------------------------------  ## using a user-defined numeric filter filterFeatures(feat1, VariableFilter(\"pval\", 0.03, \"<=\")) #> 'pval' found in 1 out of 3 assay(s). #> No filter applied to the following assay(s) because one or more #> filtering variables are missing in the rowData: peptides, proteins. You #> can control whether to remove or keep the features using the 'keep' #> argument (see '?filterFeature'). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 3 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 0 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 0 rows and 2 columns   ## using the formula interface filterFeatures(feat1, ~ pval <= 0.03) #> 'pval' found in 1 out of 3 assay(s). #> No filter applied to the following assay(s) because one or more #> filtering variables are missing in the rowData: peptides, proteins. You #> can control whether to remove or keep the features using the 'keep' #> argument (see '?filterFeature'). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 3 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 0 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 0 rows and 2 columns   ## you can also remove all p-values that are NA (if any) filterFeatures(feat1, ~ !is.na(pval)) #> 'pval' found in 1 out of 3 assay(s). #> No filter applied to the following assay(s) because one or more #> filtering variables are missing in the rowData: peptides, proteins. You #> can control whether to remove or keep the features using the 'keep' #> argument (see '?filterFeature'). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 0 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 0 rows and 2 columns   ## ---------------------------------------------------------------- ## Negative control - filtering for an non-existing markers value, ## returning empty results. ## ----------------------------------------------------------------  filterFeatures(feat1, VariableFilter(\"location\", \"not\")) #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 0 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 0 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 0 rows and 2 columns   filterFeatures(feat1, ~ location == \"not\") #> 'location' found in 3 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 0 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 0 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 0 rows and 2 columns   ## ---------------------------------------------------------------- ## Filtering for a  missing feature variable. The outcome is controled ## by keep ## ---------------------------------------------------------------- data(feat2)  filterFeatures(feat2, ~ y < 0) #> 'y' found in 2 out of 3 assay(s). #> No filter applied to the following assay(s) because one or more #> filtering variables are missing in the rowData: assay1. You can control #> whether to remove or keep the features using the 'keep' argument (see #> '?filterFeature'). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] assay1: SummarizedExperiment with 0 rows and 4 columns  #>  [2] assay2: SummarizedExperiment with 1 rows and 4 columns  #>  [3] assay3: SummarizedExperiment with 5 rows and 4 columns   filterFeatures(feat2, ~ y < 0, keep = TRUE) #> 'y' found in 2 out of 3 assay(s). #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] assay1: SummarizedExperiment with 10 rows and 4 columns  #>  [2] assay2: SummarizedExperiment with 1 rows and 4 columns  #>  [3] assay3: SummarizedExperiment with 5 rows and 4 columns   ## ---------------------------------------------------------------- ## Example with missing values ## ----------------------------------------------------------------  data(feat1) rowData(feat1[[1]])[1, \"location\"] <- NA rowData(feat1[[1]]) #> DataFrame with 10 rows and 5 columns #>            Sequence     Protein       Var      location      pval #>         <character> <character> <integer>   <character> <numeric> #> PSM1       SYGFNAAR       ProtA         1            NA     0.084 #> PSM2       SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3       SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4       ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5       ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6       ELGNDAYK       ProtA         6 Mitochondr...     0.011 #> PSM7  IAEESNFPFI...       ProtB         7       unknown     0.075 #> PSM8  IAEESNFPFI...       ProtB         8       unknown     0.038 #> PSM9  IAEESNFPFI...       ProtB         9       unknown     0.028 #> PSM10 IAEESNFPFI...       ProtB        10       unknown     0.097  ## The row with the NA is not removed rowData(filterFeatures(feat1, ~ location == \"Mitochondrion\")[[1]]) #> 'location' found in 1 out of 1 assay(s). #> DataFrame with 6 rows and 5 columns #>         Sequence     Protein       Var      location      pval #>      <character> <character> <integer>   <character> <numeric> #> PSM1    SYGFNAAR       ProtA         1            NA     0.084 #> PSM2    SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3    SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4    ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5    ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6    ELGNDAYK       ProtA         6 Mitochondr...     0.011 rowData(filterFeatures(feat1, ~ location == \"Mitochondrion\", na.rm = FALSE)[[1]]) #> 'location' found in 1 out of 1 assay(s). #> DataFrame with 6 rows and 5 columns #>         Sequence     Protein       Var      location      pval #>      <character> <character> <integer>   <character> <numeric> #> PSM1    SYGFNAAR       ProtA         1            NA     0.084 #> PSM2    SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3    SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4    ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5    ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6    ELGNDAYK       ProtA         6 Mitochondr...     0.011  ## The row with the NA is removed rowData(filterFeatures(feat1, ~ location == \"Mitochondrion\", na.rm = TRUE)[[1]]) #> 'location' found in 1 out of 1 assay(s). #> DataFrame with 5 rows and 5 columns #>         Sequence     Protein       Var      location      pval #>      <character> <character> <integer>   <character> <numeric> #> PSM2    SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3    SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4    ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5    ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6    ELGNDAYK       ProtA         6 Mitochondr...     0.011  ## Note that in situations with missing values, it is possible to ## use the `%in%` operator or filter missing values out ## explicitly.  rowData(filterFeatures(feat1, ~ location %in% \"Mitochondrion\")[[1]]) #> 'location' found in 1 out of 1 assay(s). #> DataFrame with 5 rows and 5 columns #>         Sequence     Protein       Var      location      pval #>      <character> <character> <integer>   <character> <numeric> #> PSM2    SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3    SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4    ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5    ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6    ELGNDAYK       ProtA         6 Mitochondr...     0.011 rowData(filterFeatures(feat1, ~ location %in% c(NA, \"Mitochondrion\"))[[1]]) #> 'location' found in 1 out of 1 assay(s). #> DataFrame with 6 rows and 5 columns #>         Sequence     Protein       Var      location      pval #>      <character> <character> <integer>   <character> <numeric> #> PSM1    SYGFNAAR       ProtA         1            NA     0.084 #> PSM2    SYGFNAAR       ProtA         2 Mitochondr...     0.077 #> PSM3    SYGFNAAR       ProtA         3 Mitochondr...     0.063 #> PSM4    ELGNDAYK       ProtA         4 Mitochondr...     0.073 #> PSM5    ELGNDAYK       ProtA         5 Mitochondr...     0.012 #> PSM6    ELGNDAYK       ProtA         6 Mitochondr...     0.011  ## Explicit handling filterFeatures(feat1, ~ !is.na(location) & location == \"Mitochondrion\") #> 'location' found in 1 out of 1 assay(s). #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 5 rows and 2 columns   ## Using the pipe operator feat1 |>    filterFeatures( ~ !is.na(location)) |>    filterFeatures( ~ location == \"Mitochondrion\") #> 'location' found in 1 out of 1 assay(s). #> 'location' found in 1 out of 1 assay(s). #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 5 rows and 2 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-longForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape into a long data format — longForm,QFeatures-method","title":"Reshape into a long data format — longForm,QFeatures-method","text":"longForm() method transform QFeatures SummarizedExperiment instance long tidy DataFrame contains assay data, quantitative value reported separate line. colData rowData varibales can also added. function extension longForm() method MultiAssayExperiment::MultiAssayExperiment. Note previous longFormat implementation defunct.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-longForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape into a long data format — longForm,QFeatures-method","text":"","code":"# S4 method for class 'QFeatures' longForm(object, colvars = NULL, rowvars = NULL, i = 1L)  # S4 method for class 'SummarizedExperiment' longForm(object, colvars = NULL, rowvars = NULL, i = seq_along(assays(object)))"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-longForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape into a long data format — longForm,QFeatures-method","text":"object instance class QFeatures SummarizedExperiment. colvars character() selects column(s) colData. rowvars character() names rowData variables (columns) retain assay. object instance class QFeatures, numeric(1) indicating assay within SummarizedExperiment object return. Default 1L. object SummarizedExperiment, numeric() indicating assays pull convert. Default use assays.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-longForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape into a long data format — longForm,QFeatures-method","text":"DataFrame instance.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-longForm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape into a long data format — longForm,QFeatures-method","text":"","code":"data(feat2)  longForm(feat2) #> DataFrame with 84 rows and 5 columns #>           assay     primary     rowname     colname     value #>     <character> <character> <character> <character> <numeric> #> 1        assay1          S1           a          S1         1 #> 2        assay1          S1           b          S1         2 #> 3        assay1          S1           c          S1         3 #> 4        assay1          S1           d          S1         4 #> 5        assay1          S1           e          S1         5 #> ...         ...         ...         ...         ...       ... #> 80       assay3         S12           j         S12        24 #> 81       assay3         S12           k         S12        25 #> 82       assay3         S12           l         S12        26 #> 83       assay3         S12           m         S12        27 #> 84       assay3         S12           n         S12        28  ## add a colData variable and use it in longFrom colData(feat2)$colvar <- paste0(\"Var\", 1:12) colData(feat2) #> DataFrame with 12 rows and 1 column #>          colvar #>     <character> #> S1         Var1 #> S2         Var2 #> S3         Var3 #> S4         Var4 #> S5         Var5 #> ...         ... #> S8         Var8 #> S9         Var9 #> S10       Var10 #> S11       Var11 #> S12       Var12 longForm(feat2, colvars = \"colvar\") #> DataFrame with 84 rows and 6 columns #>           assay     primary     rowname     colname     value      colvar #>     <character> <character> <character> <character> <numeric> <character> #> 1        assay1          S1           a          S1         1        Var1 #> 2        assay1          S1           b          S1         2        Var1 #> 3        assay1          S1           c          S1         3        Var1 #> 4        assay1          S1           d          S1         4        Var1 #> 5        assay1          S1           e          S1         5        Var1 #> ...         ...         ...         ...         ...       ...         ... #> 80       assay3         S12           j         S12        24       Var12 #> 81       assay3         S12           k         S12        25       Var12 #> 82       assay3         S12           l         S12        26       Var12 #> 83       assay3         S12           m         S12        27       Var12 #> 84       assay3         S12           n         S12        28       Var12  ## use a rowData variable in longFrom rowDataNames(feat2) #> CharacterList of length 3 #> [[\"assay1\"]] Prot x #> [[\"assay2\"]] Prot x y #> [[\"assay3\"]] Prot x y longForm(feat2, rowvar = \"Prot\") #> DataFrame with 84 rows and 6 columns #>           assay     primary     rowname     colname     value        Prot #>     <character> <character> <character> <character> <numeric> <character> #> 1        assay1          S1           a          S1         1          Pa #> 2        assay1          S1           b          S1         2          Pb #> 3        assay1          S1           c          S1         3          Pc #> 4        assay1          S1           d          S1         4          Pd #> 5        assay1          S1           e          S1         5          Pe #> ...         ...         ...         ...         ...       ...         ... #> 80       assay3         S12           j         S12        24          Pj #> 81       assay3         S12           k         S12        25          Pk #> 82       assay3         S12           l         S12        26          Pl #> 83       assay3         S12           m         S12        27          Pm #> 84       assay3         S12           n         S12        28          Pn  ## use both col/rowData longForm(feat2, colvar = \"colvar\", rowvar = \"Prot\") #> DataFrame with 84 rows and 7 columns #>           assay     primary     rowname     colname     value      colvar #>     <character> <character> <character> <character> <numeric> <character> #> 1        assay1          S1           a          S1         1        Var1 #> 2        assay1          S1           b          S1         2        Var1 #> 3        assay1          S1           c          S1         3        Var1 #> 4        assay1          S1           d          S1         4        Var1 #> 5        assay1          S1           e          S1         5        Var1 #> ...         ...         ...         ...         ...       ...         ... #> 80       assay3         S12           j         S12        24       Var12 #> 81       assay3         S12           k         S12        25       Var12 #> 82       assay3         S12           l         S12        26       Var12 #> 83       assay3         S12           m         S12        27       Var12 #> 84       assay3         S12           n         S12        28       Var12 #>            Prot #>     <character> #> 1            Pa #> 2            Pb #> 3            Pc #> 4            Pd #> 5            Pe #> ...         ... #> 80           Pj #> 81           Pk #> 82           Pl #> 83           Pm #> 84           Pn  ## also works on a single SE se <- getWithColData(feat2, 1) #> Warning: 'experiments' dropped; see 'drops()' longForm(se) #> DataFrame with 40 rows and 4 columns #>         rowname     colname     value assayName #>     <character> <character> <numeric> <integer> #> 1             a          S1         1         1 #> 2             b          S1         2         1 #> 3             c          S1         3         1 #> 4             d          S1         4         1 #> 5             e          S1         5         1 #> ...         ...         ...       ...       ... #> 36            f          S4        36         1 #> 37            g          S4        37         1 #> 38            h          S4        38         1 #> 39            i          S4        39         1 #> 40            j          S4        40         1 longForm(se, colvar = \"colvar\") #> DataFrame with 40 rows and 5 columns #>         rowname     colname     value assayName      colvar #>     <character> <character> <numeric> <integer> <character> #> 1             a          S1         1         1        Var1 #> 2             b          S1         2         1        Var1 #> 3             c          S1         3         1        Var1 #> 4             d          S1         4         1        Var1 #> 5             e          S1         5         1        Var1 #> ...         ...         ...       ...       ...         ... #> 36            f          S4        36         1        Var4 #> 37            g          S4        37         1        Var4 #> 38            h          S4        38         1        Var4 #> 39            i          S4        39         1        Var4 #> 40            j          S4        40         1        Var4 longForm(se, rowvar = \"Prot\") #> DataFrame with 40 rows and 5 columns #>         rowname     colname     value assayName        Prot #>     <character> <character> <numeric> <integer> <character> #> 1             a          S1         1         1          Pa #> 2             b          S1         2         1          Pb #> 3             c          S1         3         1          Pc #> 4             d          S1         4         1          Pd #> 5             e          S1         5         1          Pe #> ...         ...         ...       ...       ...         ... #> 36            f          S4        36         1          Pf #> 37            g          S4        37         1          Pg #> 38            h          S4        38         1          Ph #> 39            i          S4        39         1          Pi #> 40            j          S4        40         1          Pj longForm(se, colvar = \"colvar\", rowvar = \"Prot\") #> DataFrame with 40 rows and 6 columns #>         rowname     colname     value assayName      colvar        Prot #>     <character> <character> <numeric> <integer> <character> <character> #> 1             a          S1         1         1        Var1          Pa #> 2             b          S1         2         1        Var1          Pb #> 3             c          S1         3         1        Var1          Pc #> 4             d          S1         4         1        Var1          Pd #> 5             e          S1         5         1        Var1          Pe #> ...         ...         ...       ...       ...         ...         ... #> 36            f          S4        36         1        Var4          Pf #> 37            g          S4        37         1        Var4          Pg #> 38            h          S4        38         1        Var4          Ph #> 39            i          S4        39         1        Var4          Pi #> 40            j          S4        40         1        Var4          Pj"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-missing-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Managing missing data — missing-data","title":"Managing missing data — missing-data","text":"manual page describes handling missing values QFeatures objects. following functions, object class QFeatures, optional assay index name can specified define assay (name index) operate. following functions currently available: zeroIsNA(object, ) replaces 0 object NA. often necessary third-party software assume features quantified assigned intensity 0. infIsNA(object, ) replaces infinite values object NA. necessary third-party software divide expression data zero values, instance custom normalization. nNA(object, ) returns list missing value summaries. first element nNA gives DataFrame number proportion missing values whole assay; second element nNArows provides DataFrame number proportion missing values features (rows) assay(s); third element nNAcols provides number proportions missing values sample assay(s).  object class QFeatures additional column assays provided element's DataFrame. filterNA(object, pNA, ) removes features (rows) contain proportion missing values pNA higher. See Processing vignette examples.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-missing-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Managing missing data — missing-data","text":"","code":"# S4 method for class 'SummarizedExperiment,missing' zeroIsNA(object, i)  # S4 method for class 'QFeatures,integer' zeroIsNA(object, i)  # S4 method for class 'QFeatures,numeric' zeroIsNA(object, i)  # S4 method for class 'QFeatures,character' zeroIsNA(object, i)  # S4 method for class 'SummarizedExperiment,missing' infIsNA(object, i)  # S4 method for class 'QFeatures,integer' infIsNA(object, i)  # S4 method for class 'QFeatures,numeric' infIsNA(object, i)  # S4 method for class 'QFeatures,character' infIsNA(object, i)  # S4 method for class 'SummarizedExperiment,missing' nNA(object, i)  # S4 method for class 'QFeatures,integer' nNA(object, i)  # S4 method for class 'QFeatures,numeric' nNA(object, i)  # S4 method for class 'QFeatures,character' nNA(object, i)  # S4 method for class 'SummarizedExperiment' filterNA(object, pNA = 0)  # S4 method for class 'QFeatures' filterNA(object, pNA = 0, i)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-missing-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Managing missing data — missing-data","text":"object object class QFeatures SummarizedExperiment. One indices names assay(s) processed. pNA numeric(1) providing maximum proportion missing values per feature (row) acceptable. Feature higher proportions removed. 0 (default), features contain number NA values dropped.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-missing-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Managing missing data — missing-data","text":"instance class object.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-missing-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Managing missing data — missing-data","text":"","code":"data(ft_na)  ## Summary if missing values nNA(ft_na, 1) #> $nNA #> DataFrame with 1 row and 3 columns #>         assay       nNA       pNA #>   <character> <integer> <numeric> #> 1          na         3      0.25 #>  #> $nNArows #> DataFrame with 4 rows and 4 columns #>         assay        name       nNA       pNA #>   <character> <character> <integer> <numeric> #> 1          na           a         1  0.333333 #> 2          na           b         0  0.000000 #> 3          na           c         1  0.333333 #> 4          na           d         1  0.333333 #>  #> $nNAcols #> DataFrame with 3 rows and 4 columns #>         assay        name       nNA       pNA #>   <character> <character> <integer> <numeric> #> 1          na           A         2      0.50 #> 2          na           B         1      0.25 #> 3          na           C         0      0.00 #>   ## Remove rows with missing values assay(filterNA(ft_na, i = 1)) #>   A B  C #> b 2 6 10  ## Replace NAs by zero and back ft_na <- impute(ft_na, i = 1, method = \"zero\") assay(ft_na) #>    A  B  C #> a NA  5  9 #> b  2  6 10 #> c  3 NA 11 #> d NA  8 12 ft_na <- zeroIsNA(ft_na, 1) assay(ft_na) #>    A  B  C #> a NA  5  9 #> b  2  6 10 #> c  3 NA 11 #> d NA  8 12"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":null,"dir":"Reference","previous_headings":"","what":"QFeatures processing — QFeatures-processing","title":"QFeatures processing — QFeatures-processing","text":"manual page describes common quantitative proteomics data processing methods using QFeatures objects. following functions, object class QFeatures, optional assay index name can specified define assay (name index) operate. following functions currently available: logTransform(object, base = 2, , pc = 0) log-transforms (optional pseudocount offset) assay(s). normalize(object, method, ) normalises assay(s) according method (see Details). scaleTransform(object, center = TRUE, scale = TRUE, ) applies base::scale() SummarizedExperiment QFeatures objects. sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...) sweeps array summaries SummarizedExperiment QFeatures objects. See base::sweep() details. See Processing vignette examples.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QFeatures processing — QFeatures-processing","text":"","code":"# S4 method for class 'SummarizedExperiment' logTransform(object, base = 2, pc = 0)  # S4 method for class 'QFeatures' logTransform(object, i, name = \"logAssay\", base = 2, pc = 0)  # S4 method for class 'SummarizedExperiment' scaleTransform(object, center = TRUE, scale = TRUE)  # S4 method for class 'QFeatures' scaleTransform(object, i, name = \"scaledAssay\", center = TRUE, scale = TRUE)  # S4 method for class 'SummarizedExperiment' normalize(object, method, ...)  # S4 method for class 'QFeatures' normalize(object, i, name = \"normAssay\", method, ...)  # S4 method for class 'SummarizedExperiment' sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)  # S4 method for class 'QFeatures' sweep(   x,   MARGIN,   STATS,   FUN = \"-\",   check.margin = TRUE,   ...,   i,   name = \"sweptAssay\" )"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QFeatures processing — QFeatures-processing","text":"object object class QFeatures SummarizedExperiment. base numeric(1) providing base respect logarithms computed. Defaults 2. pc numeric(1) pseudocount add quantitative data. Useful (true) 0 present data. Default 0 (effect). numeric vector character vector giving index name, respectively, assay(s) processed. name character(1) naming new assay name. Defaults logAssay logTransform, scaledAssay scaleTranform normAssay normalize. center logical(1) (default TRUE) value numeric-alike vector length equal number columns object. See base::scale() details. scale logical(1) (default TRUE) numeric-alike vector length equal number columns object. See base::scale() details. method character(1) defining normalisation method apply. See Details. ... Additional parameters passed inner functions. x object class QFeatures SummarizedExperiment sweep. MARGIN base::sweep(), vector indices giving extent(s) x correspond STATS. STATS base::sweep(), summary statistic swept . FUN base::sweep(), function used carry sweep. check.margin base::sweep(), logical.  TRUE (default), warn length dimensions STATS match specified dimensions x.  Set FALSE small speed gain know dimensions match.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QFeatures processing — QFeatures-processing","text":"processed object class x object.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QFeatures processing — QFeatures-processing","text":"method parameter normalize can one \"sum\", \"max\", \"center.mean\", \"center.median\", \"div.mean\", \"div.median\", \"diff.median\", \"quantiles\", \"quantiles.robust\" \"vsn\". MsCoreUtils::normalizeMethods() function returns vector available normalisation methods. \"sum\" \"max\", feature's intensity divided maximum sum feature respectively. two methods applied along features (rows). \"center.mean\" \"center.median\" center respective sample (column) intensities subtracting respective column means medians. \"div.mean\" \"div.median\" divide column means medians. equivalent sweeping column means (medians) along MARGIN = 2 FUN = \"-\" (\"center.*\") FUN = \"/\" (\"div.*\"). \"diff.median\" centers samples (columns) match grand median subtracting respective columns medians differences grand median. Using \"quantiles\" \"quantiles.robust\" applies (robust) quantile normalisation, implemented preprocessCore::normalize.quantiles() preprocessCore::normalize.quantiles.robust(). \"vsn\" uses vsn::vsn2() function.  Note latter also glog-transforms intensities.  See respective manuals details function arguments. details examples normalisation, see MsCoreUtils::normalize_matrix().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-processing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QFeatures processing — QFeatures-processing","text":"","code":"MsCoreUtils::normalizeMethods() #>  [1] \"sum\"              \"max\"              \"center.mean\"      \"center.median\"    #>  [5] \"div.mean\"         \"div.median\"       \"diff.median\"      \"quantiles\"        #>  [9] \"quantiles.robust\" \"vsn\""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-subsetBy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset by feature name — subsetByFeature","title":"Subset by feature name — subsetByFeature","text":"function find assays features match directly (name) indirectly (aggregation) feature name. subsetByFeature function first identify assay contains feature(s) filter rows matching feature names exactly. find, assays, features produces aggregation aggregateQFeatures function. See QFeatures example.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-subsetBy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset by feature name — subsetByFeature","text":"x instance class QFeatures. y character feature names present assay x. ... Additional parameters. Ignored.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-subsetBy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset by feature name — subsetByFeature","text":"new instance class QFeatures containing relevant assays features.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-subsetBy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset by feature name — subsetByFeature","text":"","code":"example(aggregateFeatures) #>  #> aggrgF> ## --------------------------------------- #> aggrgF> ## An example QFeatures with PSM-level data #> aggrgF> ## --------------------------------------- #> aggrgF> data(feat1) #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  #> aggrgF> ## Aggregate PSMs into peptides #> aggrgF> feat1 <- aggregateFeatures(feat1, \"psms\", \"Sequence\", name = \"peptides\") #>  Aggregated: 1/1 #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 2 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns  #>  #> aggrgF> ## Aggregate peptides into proteins #> aggrgF> feat1 <- aggregateFeatures(feat1, \"peptides\", \"Protein\", name = \"proteins\") #>  Aggregated: 1/1 #>  #> aggrgF> feat1 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 10 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 3 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 2 rows and 2 columns  #>  #> aggrgF> assay(feat1[[1]]) #>       S1 S2 #> PSM1   1 11 #> PSM2   2 12 #> PSM3   3 13 #> PSM4   4 14 #> PSM5   5 15 #> PSM6   6 16 #> PSM7   7 17 #> PSM8   8 18 #> PSM9   9 19 #> PSM10 10 20 #>  #> aggrgF> assay(feat1[[2]]) #>              S1   S2 #> ELGNDAYK    5.0 15.0 #> IAEESNFPFIK 8.5 18.5 #> SYGFNAAR    2.0 12.0 #>  #> aggrgF> aggcounts(feat1[[2]]) #>             S1 S2 #> ELGNDAYK     3  3 #> IAEESNFPFIK  4  4 #> SYGFNAAR     3  3 #>  #> aggrgF> assay(feat1[[3]]) #>        S1   S2 #> ProtA 3.5 13.5 #> ProtB 8.5 18.5 #>  #> aggrgF> aggcounts(feat1[[3]]) #>       S1 S2 #> ProtA  2  2 #> ProtB  1  1 #>  #> aggrgF> ## -------------------------------------------- #> aggrgF> ## Aggregation with missing quantitative values #> aggrgF> ## -------------------------------------------- #> aggrgF> data(ft_na) #>  #> aggrgF> ft_na #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] na: SummarizedExperiment with 4 rows and 3 columns  #>  #> aggrgF> assay(ft_na[[1]]) #>    A  B  C #> a NA  5  9 #> b  2  6 10 #> c  3 NA 11 #> d NA  8 12 #>  #> aggrgF> rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1           A #> b         2           B #> c         1           A #> d         2           B #>  #> aggrgF> ## By default, missing values are propagated #> aggrgF> ft2 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft2[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 #>  #> aggrgF> aggcounts(ft2[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2 #>  #> aggrgF> ## The rowData .n variable tallies number of initial rows that #> aggrgF> ## were aggregated (irrespective of NAs) for all the samples. #> aggrgF> rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2 #>  #> aggrgF> ## Ignored when setting na.rm = TRUE #> aggrgF> ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums, na.rm = TRUE) #> Your quantitative data contain missing values. Please read the relevant #> section(s) in the aggregateFeatures manual page regarding the effects #> of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft3[[2]]) #>   A  B  C #> 1 3  5 20 #> 2 2 14 22 #>  #> aggrgF> aggcounts(ft3[[2]]) #>   A B C #> 1 1 1 2 #> 2 1 2 2 #>  #> aggrgF> ## ----------------------------------------------- #> aggrgF> ## Aggregation with missing values in the row data #> aggrgF> ## ----------------------------------------------- #> aggrgF> ## Row data results without any NAs, which includes the #> aggrgF> ## Y variables #> aggrgF> rowData(ft2[[2]]) #> DataFrame with 2 rows and 3 columns #>           X           Y        .n #>   <integer> <character> <integer> #> 1         1           A         2 #> 2         2           B         2 #>  #> aggrgF> ## Missing value in the Y feature variable #> aggrgF> rowData(ft_na[[1]])[1, \"Y\"] <- NA #>  #> aggrgF> rowData(ft_na[[1]]) #> DataFrame with 4 rows and 2 columns #>           X           Y #>   <integer> <character> #> a         1          NA #> b         2           B #> c         1           A #> d         2           B #>  #> aggrgF> ft3 <- aggregateFeatures(ft_na, 1, fcol = \"X\", fun = colSums) #> Your quantitative and row data contain missing values. Please read the #> relevant section(s) in the aggregateFeatures manual page regarding the #> effects of missing values on data aggregation. #>  Aggregated: 1/1 #>  #> aggrgF> ## The Y feature variable has been dropped! #> aggrgF> assay(ft3[[2]]) #>    A  B  C #> 1 NA NA 20 #> 2 NA 14 22 #>  #> aggrgF> rowData(ft3[[2]]) #> DataFrame with 2 rows and 2 columns #>           X        .n #>   <integer> <integer> #> 1         1         2 #> 2         2         2 #>  #> aggrgF> ## -------------------------------------------- #> aggrgF> ## Using a peptide-by-proteins adjacency matrix #> aggrgF> ## -------------------------------------------- #> aggrgF>  #> aggrgF> ## Let's use assay peptides from object feat1 and #> aggrgF> ## define that peptide SYGFNAAR maps to proteins #> aggrgF> ## Prot A and B #> aggrgF>  #> aggrgF> se <- feat1[[\"peptides\"]] #>  #> aggrgF> rowData(se)$Protein[3] <- c(\"ProtA;ProtB\") #>  #> aggrgF> rowData(se) #> DataFrame with 3 rows and 4 columns #>                  Sequence       Protein      location        .n #>               <character>   <character>   <character> <integer> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3 #>  #> aggrgF> ## This can also be defined using anadjacency matrix, manual #> aggrgF> ## encoding here. See PSMatch::makeAdjacencyMatrix() for a #> aggrgF> ## function that does it automatically. #> aggrgF> adj <- matrix(0, nrow = 3, ncol = 2, #> aggrgF+               dimnames = list(rownames(se), #> aggrgF+                               c(\"ProtA\", \"ProtB\"))) #>  #> aggrgF> adj[1, 1] <- adj[2, 2] <- adj[3, 1:2] <- 1 #>  #> aggrgF> adj #>             ProtA ProtB #> ELGNDAYK        1     0 #> IAEESNFPFIK     0     1 #> SYGFNAAR        1     1 #>  #> aggrgF> adjacencyMatrix(se) <- adj #>  #> aggrgF> rowData(se) #> DataFrame with 3 rows and 5 columns #>                  Sequence       Protein      location        .n adjacencyMatrix #>               <character>   <character>   <character> <integer>     <dgCMatrix> #> ELGNDAYK         ELGNDAYK         ProtA Mitochondr...         3             1:0 #> IAEESNFPFIK IAEESNFPFI...         ProtB       unknown         4             0:1 #> SYGFNAAR         SYGFNAAR ProtA;Prot... Mitochondr...         3             1:1 #>  #> aggrgF> adjacencyMatrix(se) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>             ProtA ProtB #> ELGNDAYK        1     . #> IAEESNFPFIK     .     1 #> SYGFNAAR        1     1 #>  #> aggrgF> ## Aggregation using the adjacency matrix #> aggrgF> se2 <- aggregateFeatures(se, fcol = \"adjacencyMatrix\", #> aggrgF+                          fun = MsCoreUtils::colMeansMat) #>  #> aggrgF> ## Peptide SYGFNAAR was taken into account in both ProtA and ProtB #> aggrgF> ## aggregations. #> aggrgF> assay(se2) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25 #>  #> aggrgF> ## Aggregation by matrix on a QFeature object works as with a #> aggrgF> ## vector #> aggrgF> ft <- QFeatures(list(peps = se)) #>  #> aggrgF> ft <- aggregateFeatures(ft, \"peps\", \"adjacencyMatrix\", name = \"protsByMat\", #> aggrgF+                         fun = MsCoreUtils::colMeansMat) #>  Aggregated: 1/1 #>  #> aggrgF> assay(ft[[2]]) #>         S1    S2 #> ProtA 3.50 13.50 #> ProtB 5.25 15.25 #>  #> aggrgF> rowData(ft[[2]]) #> DataFrame with 2 rows and 1 column #>              .n #>       <integer> #> ProtA         2 #> ProtB         2  ## Retrieve protein 'ProtA' and its 2 peptides and 6 PSMs feat1[\"ProtA\", , ] #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] psms: SummarizedExperiment with 6 rows and 2 columns  #>  [2] peptides: SummarizedExperiment with 2 rows and 2 columns  #>  [3] proteins: SummarizedExperiment with 1 rows and 2 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and Get QFeatures Type — setQFeaturesType","title":"Set and Get QFeatures Type — setQFeaturesType","text":"Developer-level functions set retrieve type QFeatures object. type can help internal methods adapt behaviour structure data.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and Get QFeatures Type — setQFeaturesType","text":"","code":"setQFeaturesType(object, type)  getQFeaturesType(object)  validQFeaturesTypes()"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and Get QFeatures Type — setQFeaturesType","text":"object instance class QFeatures. type character(1) defining type QFeatures. Must one values returned validQFeaturesTypes().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set and Get QFeatures Type — setQFeaturesType","text":"setQFeaturesType(): returns updated QFeatures object type stored metadata. getQFeaturesType(): returns character string indicating type QFeatures object. type explicitly set, inferred class experiments. QFeatures contains SingleCellExperiment objects, type set \"scp\". Otherwise, set \"bulk\". validQFeaturesTypes(): character vector valid QFeatures types.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and Get QFeatures Type — setQFeaturesType","text":"functions control internal metadata slot (._type) used distinguish different structural uses QFeatures objects. slot directly accessible metadata(object)[[\"._type\"]].","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set and Get QFeatures Type — setQFeaturesType","text":"QFeatures type slot introduced , context scp package, found SingleCellExperiment objects slower SummarizedExperiment objects (GH issue: scp#83). result, started using SummarizedExperiment objects within scp. However, retain information type data handled, introduced QFeatures type slot. slot , example, used show method QFeatures.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/QFeatures-type.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Set and Get QFeatures Type — setQFeaturesType","text":"functions intended package developers internal use. End users typically call directly.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/countUniqueFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Features — countUniqueFeatures","title":"Count Unique Features — countUniqueFeatures","text":"function counts number unique features per sample. grouping structure can provided count higher level features assays, example counting number unique proteins PSM data.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/countUniqueFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Features — countUniqueFeatures","text":"","code":"countUniqueFeatures(object, i, groupBy = NULL, colDataName = \"count\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/countUniqueFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Features — countUniqueFeatures","text":"object object class QFeatures. numeric() character() vector indicating assays rowData taken. groupBy character(1) indicating variable name rowData contains grouping variable, instance count unique number peptides proteins expressed samples (column). groupBy missing, number non zero elements per sample stored. colDataName character(1) giving name new variable colData number unique features stored. name already exist colData.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/countUniqueFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Features — countUniqueFeatures","text":"object class QFeatures.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/countUniqueFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Features — countUniqueFeatures","text":"","code":"data(\"ft_na\") ## Count number of (non-missing) PSMs ft_na <- countUniqueFeatures(ft_na,                               i = \"na\",                               colDataName = \"counts\") ft_na$counts #> [1] 2 3 4 ## Count number of unique rowData feature ft_na <- countUniqueFeatures(ft_na,                               i = \"na\",                               groupBy = \"Y\",                              colDataName = \"Y_counts\") ft_na$Y_counts #> [1] 2 2 2"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive MultiAssayExperiment Explorer — display","title":"Interactive MultiAssayExperiment Explorer — display","text":"shiny app browser explore assays MultiAssayExperiment object. assay can selected dropdown meny side panel, quantitative data row metadata displayed respective Assay Row data tabs. Heatmap tab displays heatmap assay. selection rows Row data table used subset features displayed Assay table heatmap currectly selected. See QFeatures example.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive MultiAssayExperiment Explorer — display","text":"","code":"display(object, n = 100, ...)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive MultiAssayExperiment Explorer — display","text":"object instance inheriting MultiAssayExperiment. n numeric(1) indicating maximum number features (rows) consider disabling row clustering displaying feature names speed purposes. Default 100. ... Additional parameters (Rowv labRow, set internally based value n) passed heatmap.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive MultiAssayExperiment Explorer — display","text":"Used side effect.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactive MultiAssayExperiment Explorer — display","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/display.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive MultiAssayExperiment Explorer — display","text":"","code":"if (FALSE) { # \\dontrun{ data(feat2) display(feat2) } # }"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat1.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature example data — feat1","title":"Feature example data — feat1","text":"feat1 small test QFeatures object testing demonstration. feat2 used demonstrate assay joins. ft_na tiny test set contains missing values used demonstrate test impact missing values data processing. se_na2 SummarizedExperiment missing values mixed origin.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature example data — feat1","text":"","code":"feat1"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Feature example data — feat1","text":"object class QFeatures length 1.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat3.html","id":null,"dir":"Reference","previous_headings":"","what":"Example QFeatures object after processing — feat3","title":"Example QFeatures object after processing — feat3","text":"feat3 small QFeatures object contains 7 assays: psms1, psms2, psmsall, peptides, proteins, normpeptides, normproteins. dataset contains example data obtained running simple processing pipeline. can use get hands manipulating AssayLinks since 3 general cases present: One parent one child AssayLink: relationship can either one row one row (e.g. \"peptides\" \"normpeptides\") multiple rows one row (e.g. \"peptides\" \"proteins\"). One parent multiple children AssayLink: instance \"peptides\" \"normpeptides\" \"proteins\". Multiple parents one child AssayLink: links rows multiple assays single assays rows different parent assays may point row child assay. E.g. \"psms1\" \"psms2\" \"psmsall\"","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example QFeatures object after processing — feat3","text":"","code":"feat3"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example QFeatures object after processing — feat3","text":"object class QFeatures length 7.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example QFeatures object after processing — feat3","text":"feat3 built feat1. source code available inst/scripts/test_data.R","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/feat3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example QFeatures object after processing — feat3","text":"","code":"data(\"feat3\") plot(feat3)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/hlpsms.html","id":null,"dir":"Reference","previous_headings":"","what":"hyperLOPIT PSM-level expression data — hlpsms","title":"hyperLOPIT PSM-level expression data — hlpsms","text":"data.frame PSM-level quantitation data Christoforou et al. (2016). first replicate spatial proteomics dataset hyperLOPIT experimental design Mouse E14TG2a embryonic stem cells. Normalised intensities proteins TMT 10-plex labelled fractions available 3 replicates acquired MS3 mode using Orbitrap Fusion mass-spectrometer. variable names X126, X127C, X127N, X128C, X128N, X129C, X129N, X130C, X130N X131: 10 TMT tags used quantify peptides along density gradient. Sequence: peptide sequence. ProteinDescriptions: description protein peptide associated . NbProteins: number proteins protein group. ProteinGroupAccessions: main protein accession number protein group. Modifications: post-translational modifications identified peptide. qValue: PSM identification q-value. PEP: PSM posterior error probability. IonScore: Mascot ion identification score. NbMissedCleavages: number missed cleavages peptide. IsolationInterference: calculated precursor ion isolation interference. IonInjectTimems: ions injection time milli-seconds. Intensity: precursor ion intensity. Charge: peptide charge. mzDa: peptide mass charge ratio, Daltons. MHDa: peptide mass, Daltons. DeltaMassPPM: difference measure calculated mass, parts per millions. RTmin: peptide retention time, minutes. markers: localisation well known sub-cellular markers. QFeatures unknown location encode \"unknown\". details, install pRolocdata package see ?hyperLOPIT2015.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/hlpsms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hyperLOPIT PSM-level expression data — hlpsms","text":"","code":"hlpsms"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/hlpsms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hyperLOPIT PSM-level expression data — hlpsms","text":"object class data.frame 3010 rows 28 columns.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/hlpsms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"hyperLOPIT PSM-level expression data — hlpsms","text":"pRolocdata package: http://bioconductor.org/packages/pRolocdata/","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/hlpsms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"hyperLOPIT PSM-level expression data — hlpsms","text":"draft map mouse pluripotent stem cell spatial proteome Christoforou , Mulvey CM, Breckels LM, Geladaki , Hurrell T, Hayward PC, Naake T, Gatto L, Viner R, Martinez Arias , Lilley KS. Nat Commun. 2016 Jan 12;7:8992. doi: 10.1038/ncomms9992. PubMed PMID: 26754106; PubMed Central PMCID: PMC4729960.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative proteomics data imputation — impute","title":"Quantitative proteomics data imputation — impute","text":"impute method performs data imputation QFeatures SummarizedExperiment instance using variety methods. Users proceed care imputing data take precautions assure imputation produce valid results, particular naive imputations replacing missing values 0. See MsCoreUtils::impute_matrix() details different imputation methods available strategies.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative proteomics data imputation — impute","text":"","code":"impute  # S4 method for class 'SummarizedExperiment' impute(object, method, ...)  # S4 method for class 'QFeatures' impute(object, method, ..., i, name = \"imputedAssay\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/impute.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quantitative proteomics data imputation — impute","text":"object class standardGeneric length 1.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative proteomics data imputation — impute","text":"object SummarizedExperiment QFeatures object missing values imputed. method character(1) defining imputation method. See imputeMethods() available ones. See MsCoreUtils::impute_matrix() details. ... Additional parameters passed inner imputation function. See MsCoreUtils::impute_matrix() details. logical(1) character(1) defines element QFeatures instance impute. missing must length one. name character(1) naming new assay name. Default imputedAssay.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/impute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative proteomics data imputation — impute","text":"","code":"MsCoreUtils::imputeMethods() #>  [1] \"bpca\"    \"knn\"     \"QRILC\"   \"MLE\"     \"MLE2\"    \"MinDet\"  \"MinProb\" #>  [8] \"min\"     \"zero\"    \"mixed\"   \"nbavg\"   \"with\"    \"RF\"      \"none\"     data(se_na2) ## table of missing values along the rows (proteins) table(rowData(se_na2)$nNA) #>  #>   0   1   2   3   4   8   9  10  #> 301 247  91  13   2  23  10   2  ## table of missing values along the columns (samples) colData(se_na2)$nNA #>  [1] 34 45 56 39 47 52 49 61 41 42 55 45 51 43 57 53  ## non-random missing values notna <- which(!rowData(se_na2)$randna) length(notna) #> [1] 35 notna #>  [1]   6  20  79  88 130 187 227 231 238 264 275 317 324 363 373 382 409 437 445 #> [20] 453 456 474 484 485 492 514 516 546 568 580 594 631 648 664 671  impute(se_na2, method = \"min\") #> class: SummarizedExperiment  #> dim: 689 16  #> metadata(3): MSnbaseFiles MSnbaseProcessing MSnbaseVersion #> assays(1): '' #> rownames(689): AT1G09210 AT1G21750 ... AT4G11150 AT4G39080 #> rowData names(2): nNA randna #> colnames(16): M1F1A M1F4A ... M2F8B M2F11B #> colData names(1): nNA  if (require(\"imputeLCMD\")) {   impute(se_na2, method = \"QRILC\")   impute(se_na2, method = \"MinDet\") } #> Loading required package: imputeLCMD #> Loading required package: tmvtnorm #> Loading required package: mvtnorm #> Loading required package: Matrix #>  #> Attaching package: ‘Matrix’ #> The following object is masked from ‘package:S4Vectors’: #>  #>     expand #> Loading required package: gmm #> Loading required package: sandwich #>  #> Attaching package: ‘sandwich’ #> The following object is masked from ‘package:generics’: #>  #>     estfun #> Loading required package: norm #> This package has some major limitations #> (for example, it does not work reliably when #> the number of variables exceeds 30), #> and has been superseded by the norm2 package. #> Loading required package: pcaMethods #>  #> Attaching package: ‘pcaMethods’ #> The following object is masked from ‘package:stats’: #>  #>     loadings #> Loading required package: impute #> Imputing along margin 2 (samples/columns). #> Imputing along margin 2 (samples/columns). #> class: SummarizedExperiment  #> dim: 689 16  #> metadata(3): MSnbaseFiles MSnbaseProcessing MSnbaseVersion #> assays(1): '' #> rownames(689): AT1G09210 AT1G21750 ... AT4G11150 AT4G39080 #> rowData names(2): nNA randna #> colnames(16): M1F1A M1F4A ... M2F8B M2F11B #> colData names(1): nNA  if (require(\"norm\"))   impute(se_na2, method = \"MLE\") #> Imputing along margin 2 (samples/columns). #> Warning: NAs introduced by coercion to integer range #> Iterations of EM:  #> 1...2... #> class: SummarizedExperiment  #> dim: 689 16  #> metadata(3): MSnbaseFiles MSnbaseProcessing MSnbaseVersion #> assays(1): '' #> rownames(689): AT1G09210 AT1G21750 ... AT4G11150 AT4G39080 #> rowData names(2): nNA randna #> colnames(16): M1F1A M1F4A ... M2F8B M2F11B #> colData names(1): nNA  impute(se_na2, method = \"mixed\",        randna = rowData(se_na2)$randna,        mar = \"knn\", mnar = \"QRILC\") #> Imputing along margin 1 (features/rows). #> Imputing along margin 1 (features/rows). #> class: SummarizedExperiment  #> dim: 689 16  #> metadata(3): MSnbaseFiles MSnbaseProcessing MSnbaseVersion #> assays(1): '' #> rownames(689): AT1G09210 AT1G21750 ... AT4G11150 AT4G39080 #> rowData names(2): nNA randna #> colnames(16): M1F1A M1F4A ... M2F8B M2F11B #> colData names(1): nNA  ## neighbour averaging x <- se_na2[1:4, 1:6] assay(x)[1, 1] <- NA ## min value assay(x)[2, 3] <- NA ## average assay(x)[3, 1:2] <- NA ## min value and average ## 4th row: no imputation assay(x) #>              M1F1A    M1F4A   M1F7A  M1F11A    M1F2B    M1F5B #> AT1G09210       NA 0.275500 0.21600 0.18525 0.465667 0.199667 #> AT1G21750 0.332000 0.279667      NA 0.16600 0.451500 0.200375 #> AT1G51760       NA       NA 0.16825 0.18825 0.459750 0.214500 #> AT1G56340 0.336733       NA      NA      NA 0.487167 0.201833  assay(impute(x, \"nbavg\")) #> Assuming values are ordered. #> Imputing along margin 1 (features/rows). #>              M1F1A    M1F4A     M1F7A  M1F11A    M1F2B    M1F5B #> AT1G09210 0.166000 0.275500 0.2160000 0.18525 0.465667 0.199667 #> AT1G21750 0.332000 0.279667 0.2228335 0.16600 0.451500 0.200375 #> AT1G51760 0.166000 0.167125 0.1682500 0.18825 0.459750 0.214500 #> AT1G56340 0.336733       NA        NA      NA 0.487167 0.201833"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":null,"dir":"Reference","previous_headings":"","what":"Join assays in a QFeatures object — joinAssays","title":"Join assays in a QFeatures object — joinAssays","text":"function applies full-join type operation 2 assays QFeatures instance.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join assays in a QFeatures object — joinAssays","text":"","code":"joinAssays(x, i, name = \"joinedAssay\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join assays in a QFeatures object — joinAssays","text":"x instance class QFeatures. indices names al least two assays joined. name character(1) naming new assay. Default joinedAssay. Note function fail already assay name.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join assays in a QFeatures object — joinAssays","text":"QFeatures object additional assay.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join assays in a QFeatures object — joinAssays","text":"rows joined chosen based rownames respective assays. user's responsability make sure meaningful, example refering unique peptide sequences proteins. join operation acts along rows expects samples (columns) assays disjoint, .e. assays share samples. Rows present assay set NA merged. rowData slots also joined. However, columns shared values matching columns/rows retained. example feature variable sample S1 contains value a1 variable sample S2 different assay contains a2, feature variable dropped merged assay. joined assay linked parent assays AssayLink object. link child assay parent assays based assay row names, just like procedure joining parent assays.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join assays in a QFeatures object — joinAssays","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/joinAssays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join assays in a QFeatures object — joinAssays","text":"","code":"## ----------------------------------------------- ## An example QFeatures with 3 assays to be joined ## ----------------------------------------------- data(feat2) feat2 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] assay1: SummarizedExperiment with 10 rows and 4 columns  #>  [2] assay2: SummarizedExperiment with 4 rows and 4 columns  #>  [3] assay3: SummarizedExperiment with 7 rows and 4 columns   feat2 <- joinAssays(feat2, 1:3)  ## Individual assays to be joined, each with 4 samples and a ## variable number of rows. assay(feat2[[1]]) #>   S1 S2 S3 S4 #> a  1 11 21 31 #> b  2 12 22 32 #> c  3 13 23 33 #> d  4 14 24 34 #> e  5 15 25 35 #> f  6 16 26 36 #> g  7 17 27 37 #> h  8 18 28 38 #> i  9 19 29 39 #> j 10 20 30 40 assay(feat2[[2]]) #>   S5 S6 S7 S8 #> h  1  5  9 13 #> i  2  6 10 14 #> j  3  7 11 15 #> k  4  8 12 16 assay(feat2[[3]]) #>   S9 S10 S11 S12 #> a  1   8  15  22 #> b  2   9  16  23 #> j  3  10  17  24 #> k  4  11  18  25 #> l  5  12  19  26 #> m  6  13  20  27 #> n  7  14  21  28  ## The joined assay contains 14 rows (corresponding to the union ## of those in the initial assays) and 12 samples assay(feat2[[\"joinedAssay\"]]) #>   S1 S2 S3 S4 S5 S6 S7 S8 S9 S10 S11 S12 #> j 10 20 30 40  3  7 11 15  3  10  17  24 #> a  1 11 21 31 NA NA NA NA  1   8  15  22 #> b  2 12 22 32 NA NA NA NA  2   9  16  23 #> k NA NA NA NA  4  8 12 16  4  11  18  25 #> h  8 18 28 38  1  5  9 13 NA  NA  NA  NA #> i  9 19 29 39  2  6 10 14 NA  NA  NA  NA #> d  4 14 24 34 NA NA NA NA NA  NA  NA  NA #> e  5 15 25 35 NA NA NA NA NA  NA  NA  NA #> f  6 16 26 36 NA NA NA NA NA  NA  NA  NA #> c  3 13 23 33 NA NA NA NA NA  NA  NA  NA #> g  7 17 27 37 NA NA NA NA NA  NA  NA  NA #> l NA NA NA NA NA NA NA NA  5  12  19  26 #> m NA NA NA NA NA NA NA NA  6  13  20  27 #> n NA NA NA NA NA NA NA NA  7  14  21  28  ## The individual rowData to be joined. rowData(feat2[[1]]) #> DataFrame with 10 rows and 2 columns #>          Prot         x #>   <character> <numeric> #> a          Pa  2.067646 #> b          Pb -0.188981 #> c          Pc  0.266870 #> d          Pd  1.671331 #> e          Pe -1.857170 #> f          Pf  1.166811 #> g          Pg  0.316521 #> h          Ph  0.976154 #> i          Pi  0.117673 #> j          Pj  2.420734 rowData(feat2[[2]]) #> DataFrame with 4 rows and 3 columns #>          Prot          x         y #>   <character>  <numeric> <numeric> #> h          Ph -0.0463617  1.547125 #> i          Pi  0.6833728 -1.513248 #> j          Pj  0.7917619  0.574492 #> k          Pk -0.5226943  1.404666 rowData(feat2[[3]]) #> DataFrame with 7 rows and 3 columns #>          Prot          x         y #>   <character>  <numeric> <numeric> #> a          Pa -0.0762406 -0.420478 #> b          Pb  0.5580027 -0.389534 #> j          Pj  2.5905327 -0.377114 #> k          Pk  0.1605870 -0.418806 #> l          Pl  0.7486858  1.967733 #> m          Pm  1.2365642 -0.516798 #> n          Pn -0.4848651  0.263387  ## Only the 'Prot' variable is retained because it is shared among ## all assays and the values and coherent across samples (the ## value of 'Prot' for row 'j' is always 'Pj'). The variable 'y' is ## missing in 'assay1' and while variable 'x' is present is all ## assays, the values for the shared rows are different. rowData(feat2[[\"joinedAssay\"]]) #> DataFrame with 14 rows and 1 column #>            Prot #>     <character> #> j            Pj #> a            Pa #> b            Pb #> k            Pk #> h            Ph #> ...         ... #> c            Pc #> g            Pg #> l            Pl #> m            Pm #> n            Pn"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"QFeatures from tabular data — readQFeatures","title":"QFeatures from tabular data — readQFeatures","text":"functions convert tabular data dedicated data objets. readSummarizedExperiment() function takes file name data.frame converts SummarizedExperiment() object.  readQFeatures() function takes data.frame converts QFeatures object (see QFeatures() details). latter, two use-cases exist: single-set case generate QFeatures object single SummarizedExperiment containing features input table. multi-set case generate QFeatures object containing multiple SummarizedExperiments, resulting splitting input table. multi-set case generally used input table contains data multiple runs/batches.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QFeatures from tabular data — readQFeatures","text":"","code":"readSummarizedExperiment(   assayData,   quantCols = NULL,   fnames = NULL,   ecol = NULL,   ... )  readQFeatures(   assayData,   colData = NULL,   quantCols = NULL,   runCol = NULL,   name = \"quants\",   removeEmptyCols = FALSE,   verbose = TRUE,   ecol = NULL,   fnames = NULL,   ... )"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QFeatures from tabular data — readQFeatures","text":"assayData data.frame, object can coerced data.frame, holding quantitative assay. readSummarizedExperiment(), can also character(1) pointing filename. data.frame typically generated identification quantification software, Sage, Proteome Discoverer, MaxQuant, ... quantCols numeric(), logical() character() defining columns assayData contain quantitative data. information can also defined colData (see details). fnames single- multi-set cases, optional character(1) numeric(1) indicating column used feature names.  Note rownames must unique within QFeatures sets. Default NULL. ecol quantCols. Available backwards compatibility. Default NULL. ecol colData set, error thrown. ... arguments can passed read.csv() except stringsAsFactors, always FALSE. applicable readSummarizedExperiment(). colData data.frame (object can coerced data.frame) containing sample/column annotations, including quantCols runCol (see details). runCol multi-set case, numeric(1) character(1) pointing column assayData (colData, set) contains runs/batches. Make sure column name tables identical syntactically valid (supply character) index (supply numeric). Note characters converted syntactically valid names using make.names name single-set case, optional character(1) name set QFeatures object. Default quants. removeEmptyCols logical(1). TRUE, quantitative columns contain missing values removed. verbose logical(1) indicating whether progress data reading formatting printed console. Default TRUE.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QFeatures from tabular data — readQFeatures","text":"instance class QFeatures SummarizedExperiment::SummarizedExperiment(). former, quantitative sets run stored SummarizedExperiment::SummarizedExperiment() object.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QFeatures from tabular data — readQFeatures","text":"single- multi-set cases defined quantCols runCol parameters, whether passed quantCols runCol vectors /colData data.frame (see ).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"single-set-case","dir":"Reference","previous_headings":"","what":"Single-set case","title":"QFeatures from tabular data — readQFeatures","text":"quantitative data variables defined quantCols. single-set case can represented schematically shown .   Note every quantCols column contains data single sample. single-set case defined absence runCol input (see next section). provide (non-exhaustive) list typical data sets fall single-set case: Peptide- protein-level label-free data (bulk single-cell). Peptide- protein-level multiplexed (e.g. TMT) data (bulk single-cell). PSM-level multiplexed data acquired single MS run (bulk single-cell). PSM-level data fractionation experiments, fraction sample acquired multiplexing label.","code":"|------+----------------+-----------| | cols | quantCols 1..N | more cols | | .    | ...            | ...       | | .    | ...            | ...       | | .    | ...            | ...       | |------+----------------+-----------|"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"multi-set-case","dir":"Reference","previous_headings":"","what":"Multi-set case","title":"QFeatures from tabular data — readQFeatures","text":"run/batch variable, runCol, required import multi-set data. multi-set case can represented schematically shown .   Every quantCols column contains data multiple samples acquired different runs. multi-set case applies runCol provided, determine table split multiple sets. provide (non-exhaustive) list typical data sets fall multi-set case: PSM- precursor-level multiplexed data acquired multiple runs (bulk single-cell) PSM- precursor-level label-free data acquired multiple runs (bulk single-cell) DIA-NN data (see also readQFeaturesFromDIANN()).","code":"|--------+------+----------------+-----------| | runCol | cols | quantCols 1..N | more cols | |   1    | .    | ...            | ...       | |   1    | .    | ...            | ...       | |--------+------+----------------+-----------| |   2    | .    | ...            | ...       | |--------+------+----------------+-----------| |   .    | .    | ...            | ...       | |--------+------+----------------+-----------|"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"adding-sample-annotations-with-coldata","dir":"Reference","previous_headings":"","what":"Adding sample annotations with colData","title":"QFeatures from tabular data — readQFeatures","text":"recommend providing sample annotations creating QFeatures object. colData table row corresponds sample column provides information samples. restriction number columns type data contain. However, impose one two columns (depending use case) allow link annotations sample quantitative data: Single-set case: colData must contain column named quantCols provides names columns assayData containing quantitative values sample (see single-set cases examples). Multi-set case: colData must contain column named quantCols provides names columns assayData quantitative values sample, column named runCol provides MS runs/batches sample acquired. entries colData[[\"runCol\"]] matched entries provided assayData[[runCol]]. quantCols argument provided readQFeatures(), function automatically determine quantCols colData[[\"quantCols\"]]. Therefore, quantCols colData missing. Samples present assayData absent colData lead warning, missing entries automatically added colData filled NAs. using quantCols runCol arguments (without colData), colData contains zero columns/variables.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QFeatures from tabular data — readQFeatures","text":"Laurent Gatto, Christophe Vanderaa","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QFeatures from tabular data — readQFeatures","text":"","code":"###################################### ## Single-set case.  ## Load a data.frame with PSM-level data data(hlpsms) hlpsms[1:10, c(1, 2, 10:11, 14, 17)] #>           X126      X127C       X131 Sequence ProteinGroupAccessions     PEP #> 383 0.12283431 0.08045915 0.11961594  SQGEIDk                 Q8BYY4 0.11800 #> 475 0.35268185 0.14162381 0.02957384  YEAQGDk                 P46467 0.01070 #> 478 0.01546089 0.16142297 0.04370403  TTScDTk                 Q64449 0.11800 #> 552 0.04702854 0.09288723 0.10014038  aEELESR                 P60469 0.04450 #> 596 0.01044693 0.15866147 0.02307803  aQEEAIk               P13597-2 0.00850 #> 610 0.04955362 0.01215244 0.29732174 dGAVDGcR                 Q6P5D8 0.00322 #> 731 0.04007112 0.06632932 0.10188731 AcDSAEVk                 Q01237 0.04090 #> 786 0.16122744 0.10251588 0.04884985 VSSDEDLk                 Q9D8U8 0.00130 #> 795 0.60288497 0.11022069 0.02182222  TDQNYEk                 Q8BMJ2 0.01880 #> 816 0.10298287 0.05818306 0.07723716  QEEIQQk                 Q3URD3 0.02900  ## Create a QFeatures object with a single psms set qf1 <- readQFeatures(hlpsms, quantCols = 1:10, name = \"psms\") #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. qf1 #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] psms: SummarizedExperiment with 3010 rows and 10 columns  colData(qf1) #> DataFrame with 10 rows and 0 columns  ###################################### ## Single-set case with colData.  (coldat <- data.frame(var = rnorm(10),                       quantCols = names(hlpsms)[1:10])) #>           var quantCols #> 1   0.7543883      X126 #> 2  -1.4626257     X127C #> 3  -0.1084145     X127N #> 4   0.7761296     X128C #> 5   0.6055939     X128N #> 6   0.4827772     X129C #> 7   1.6805106     X129N #> 8  -0.1508190     X130C #> 9   0.6795999     X130N #> 10  0.4499002      X131 qf2 <- readQFeatures(hlpsms, colData = coldat) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. qf2 #> An instance of class QFeatures (type: bulk) with 1 set: #>  #>  [1] quants: SummarizedExperiment with 3010 rows and 10 columns  colData(qf2) #> DataFrame with 10 rows and 2 columns #>             var   quantCols #>       <numeric> <character> #> X126   0.754388        X126 #> X127C -1.462626       X127C #> X127N -0.108415       X127N #> X128C  0.776130       X128C #> X128N  0.605594       X128N #> X129C  0.482777       X129C #> X129N  1.680511       X129N #> X130C -0.150819       X130C #> X130N  0.679600       X130N #> X131   0.449900        X131  ###################################### ## Multi-set case.  ## Let's simulate 3 different files/batches for that same input ## data.frame, and define a colData data.frame.  hlpsms$file <- paste0(\"File\", sample(1:3, nrow(hlpsms), replace = TRUE)) hlpsms[1:10, c(1, 2, 10:11, 14, 17, 29)] #>           X126      X127C       X131 Sequence ProteinGroupAccessions     PEP #> 383 0.12283431 0.08045915 0.11961594  SQGEIDk                 Q8BYY4 0.11800 #> 475 0.35268185 0.14162381 0.02957384  YEAQGDk                 P46467 0.01070 #> 478 0.01546089 0.16142297 0.04370403  TTScDTk                 Q64449 0.11800 #> 552 0.04702854 0.09288723 0.10014038  aEELESR                 P60469 0.04450 #> 596 0.01044693 0.15866147 0.02307803  aQEEAIk               P13597-2 0.00850 #> 610 0.04955362 0.01215244 0.29732174 dGAVDGcR                 Q6P5D8 0.00322 #> 731 0.04007112 0.06632932 0.10188731 AcDSAEVk                 Q01237 0.04090 #> 786 0.16122744 0.10251588 0.04884985 VSSDEDLk                 Q9D8U8 0.00130 #> 795 0.60288497 0.11022069 0.02182222  TDQNYEk                 Q8BMJ2 0.01880 #> 816 0.10298287 0.05818306 0.07723716  QEEIQQk                 Q3URD3 0.02900 #>      file #> 383 File3 #> 475 File3 #> 478 File2 #> 552 File3 #> 596 File1 #> 610 File2 #> 731 File3 #> 786 File3 #> 795 File2 #> 816 File2  qf3 <- readQFeatures(hlpsms, quantCols = 1:10, runCol = \"file\") #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. qf3 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] File1: SummarizedExperiment with 986 rows and 10 columns  #>  [2] File2: SummarizedExperiment with 998 rows and 10 columns  #>  [3] File3: SummarizedExperiment with 1026 rows and 10 columns  colData(qf3) #> DataFrame with 30 rows and 0 columns   ###################################### ## Multi-set case with colData.  (coldat <- data.frame(runCol = rep(paste0(\"File\", 1:3), each = 10),                       var = rnorm(10),                       quantCols = names(hlpsms)[1:10])) #>    runCol         var quantCols #> 1   File1  0.51626857      X126 #> 2   File1  1.02704216     X127C #> 3   File1  0.73166309     X127N #> 4   File1 -0.11245031     X128C #> 5   File1  1.42917302     X128N #> 6   File1  0.89530083     X129C #> 7   File1 -1.50043104     X129N #> 8   File1 -0.70734051     X130C #> 9   File1 -0.11555948     X130N #> 10  File1  0.08755882      X131 #> 11  File2  0.51626857      X126 #> 12  File2  1.02704216     X127C #> 13  File2  0.73166309     X127N #> 14  File2 -0.11245031     X128C #> 15  File2  1.42917302     X128N #> 16  File2  0.89530083     X129C #> 17  File2 -1.50043104     X129N #> 18  File2 -0.70734051     X130C #> 19  File2 -0.11555948     X130N #> 20  File2  0.08755882      X131 #> 21  File3  0.51626857      X126 #> 22  File3  1.02704216     X127C #> 23  File3  0.73166309     X127N #> 24  File3 -0.11245031     X128C #> 25  File3  1.42917302     X128N #> 26  File3  0.89530083     X129C #> 27  File3 -1.50043104     X129N #> 28  File3 -0.70734051     X130C #> 29  File3 -0.11555948     X130N #> 30  File3  0.08755882      X131 qf4 <- readQFeatures(hlpsms, colData = coldat, runCol = \"file\") #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. qf4 #> An instance of class QFeatures (type: bulk) with 3 sets: #>  #>  [1] File1: SummarizedExperiment with 986 rows and 10 columns  #>  [2] File2: SummarizedExperiment with 998 rows and 10 columns  #>  [3] File3: SummarizedExperiment with 1026 rows and 10 columns  colData(qf4) #> DataFrame with 30 rows and 3 columns #>                  runCol        var   quantCols #>             <character>  <numeric> <character> #> File1_X126        File1   0.516269        X126 #> File1_X127C       File1   1.027042       X127C #> File1_X127N       File1   0.731663       X127N #> File1_X128C       File1  -0.112450       X128C #> File1_X128N       File1   1.429173       X128N #> ...                 ...        ...         ... #> File3_X129C       File3  0.8953008       X129C #> File3_X129N       File3 -1.5004310       X129N #> File3_X130C       File3 -0.7073405       X130C #> File3_X130N       File3 -0.1155595       X130N #> File3_X131        File3  0.0875588        X131"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":null,"dir":"Reference","previous_headings":"","what":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"function takes Report.tsv output files DIA-NN converts multi-set QFeatures object. wrapper around readQFeatures() default parameters set match DIA-NN label-free plexDIA report files: default runCol \"File.Name\" default quantColsis\"Ms1.Area\"`.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"","code":"readQFeaturesFromDIANN(   assayData,   colData = NULL,   quantCols = \"Ms1.Area\",   runCol = \"File.Name\",   multiplexing = c(\"none\", \"mTRAQ\"),   extractedData = NULL,   ecol = NULL,   verbose = TRUE,   ... )"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"assayData data.frame, object can coerced data.frame, holding quantitative assay. readSummarizedExperiment(), can also character(1) pointing filename. data.frame typically generated identification quantification software, Sage, Proteome Discoverer, MaxQuant, ... colData data.frame (object can coerced data.frame) containing sample/column annotations, including quantCols runCol (see details). quantCols numeric(), logical() character() defining columns assayData contain quantitative data. information can also defined colData (see details). runCol multi-set case, numeric(1) character(1) pointing column assayData (colData, set) contains runs/batches. Make sure column name tables identical syntactically valid (supply character) index (supply numeric). Note characters converted syntactically valid names using make.names multiplexing character(1) indicating type multiplexing used experiment. One \"none\" (default, label-free experiments) \"mTRAQ\" (plexDIA experiments). extractedData data.frame object can coerced data.frame contains data *_ms1_extracted.tsv file generated DIA-NN. argument optional currently applicable mTRAQ multiplexed experiments DIA-NN run using plexdia module (see references). ecol quantCols. Available backwards compatibility. Default NULL. ecol colData set, error thrown. verbose logical(1) indicating whether progress data reading formatting printed console. Default TRUE. ... arguments passed readQFeatures().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"instance class QFeatures. quantiative data acquisition run stored separate set SummarizedExperiment object.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"Derks, Jason, Andrew Leduc, Georg Wallmann, R. Gray Huffman, Matthew Willetts, Saad Khan, Harrison Specht, Markus Ralser, Vadim Demichev, Nikolai Slavov. 2022. \"Increasing Throughput Sensitive Proteomics plexDIA.\" Nature Biotechnology, July. Link article","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"Laurent Gatto, Christophe Vanderaa","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/readQFeaturesFromDIANN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read DIA-NN output as a QFeatures objects — readQFeaturesFromDIANN","text":"","code":"x <- read.delim(MsDataHub::benchmarkingDIA.tsv()) #> see ?MsDataHub and browseVignettes('MsDataHub') for documentation #> Error while performing HEAD request. #>    Proceeding without cache information. #> loading from cache x[[\"File.Name\"]] <- x[[\"Run\"]]  ################################# ## Label-free multi-set case  ## using default arguments readQFeaturesFromDIANN(x) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 24 sets: #>  #>  [1] RD139_Overlap_UPS1_0_1fmol_inj1: SummarizedExperiment with 28980 rows and 1 columns  #>  [2] RD139_Overlap_UPS1_0_1fmol_inj2: SummarizedExperiment with 29495 rows and 1 columns  #>  [3] RD139_Overlap_UPS1_0_1fmol_inj3: SummarizedExperiment with 29210 rows and 1 columns  #>  ... #>  [22] RD139_Overlap_UPS1_5fmol_inj1: SummarizedExperiment with 30941 rows and 1 columns  #>  [23] RD139_Overlap_UPS1_5fmol_inj2: SummarizedExperiment with 30321 rows and 1 columns  #>  [24] RD139_Overlap_UPS1_5fmol_inj3: SummarizedExperiment with 24168 rows and 1 columns   ## use the precursor identifier as assay rownames readQFeaturesFromDIANN(x, fnames = \"Precursor.Id\") |>     rownames() #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> Setting assay rownames. #> CharacterList of length 24 #> [[\"RD139_Overlap_UPS1_0_1fmol_inj1\"]] AAAAIAGELGLEFK2 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_0_1fmol_inj2\"]] AAAAEIAVK1 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_0_1fmol_inj3\"]] AAAAIAGELGLEFK2 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_0_25fmol_inj1\"]] AAAAEIAVK1 AAAAEIAVK2 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_0_25fmol_inj2\"]] AAAAEIAVK1 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_0_25fmol_inj3\"]] AAAAIAGELGLEFK2 ... YYTETEGALR2 #> [[\"RD139_Overlap_UPS1_10fmol_inj1\"]] AAAAEIAVK1 AAAAIAGELGLEFK2 ... YYTLEEIQK2 #> [[\"RD139_Overlap_UPS1_10fmol_inj2\"]] AAAAEIAVK1 AAAAIAGELGLEFK2 ... YYTLEEIQK2 #> [[\"RD139_Overlap_UPS1_10fmol_inj3\"]] AAAAEIAVK1 AAAAIAGELGLEFK2 ... YYTLEEIQK2 #> [[\"RD139_Overlap_UPS1_1fmol_inj1\"]] AAAAEIAVK1 AAAAIAGELGLEFK2 ... YYTETEGALR2 #> ... #> <14 more elements>  ## with a colData (and default arguments) cd <- data.frame(sampleInfo = LETTERS[1:24],                  quantCols = \"Ms1.Area\",                  runCol = unique(x[[\"File.Name\"]])) readQFeaturesFromDIANN(x, colData = cd) #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 24 sets: #>  #>  [1] RD139_Overlap_UPS1_0_1fmol_inj1: SummarizedExperiment with 28980 rows and 1 columns  #>  [2] RD139_Overlap_UPS1_0_1fmol_inj2: SummarizedExperiment with 29495 rows and 1 columns  #>  [3] RD139_Overlap_UPS1_0_1fmol_inj3: SummarizedExperiment with 29210 rows and 1 columns  #>  ... #>  [22] RD139_Overlap_UPS1_5fmol_inj1: SummarizedExperiment with 30941 rows and 1 columns  #>  [23] RD139_Overlap_UPS1_5fmol_inj2: SummarizedExperiment with 30321 rows and 1 columns  #>  [24] RD139_Overlap_UPS1_5fmol_inj3: SummarizedExperiment with 24168 rows and 1 columns   ################################# ## mTRAQ multi-set case  x2 <- read.delim(MsDataHub::Report.Derks2022.plexDIA.tsv()) #> see ?MsDataHub and browseVignettes('MsDataHub') for documentation #> loading from cache x2[[\"File.Name\"]] <- x2[[\"Run\"]] readQFeaturesFromDIANN(x2, multiplexing = \"mTRAQ\") #> Pivoting quantiative data. #> Checking arguments. #> Loading data as a 'SummarizedExperiment' object. #> Splitting data in runs. #> Formatting sample annotations (colData). #> Formatting data as a 'QFeatures' object. #> An instance of class QFeatures (type: bulk) with 54 sets: #>  #>  [1] wJD1146: SummarizedExperiment with 2635 rows and 3 columns  #>  [2] wJD1147: SummarizedExperiment with 3000 rows and 3 columns  #>  [3] wJD1148: SummarizedExperiment with 2676 rows and 3 columns  #>  ... #>  [52] wJD1203: SummarizedExperiment with 4441 rows and 3 columns  #>  [53] wJD1204: SummarizedExperiment with 4416 rows and 3 columns  #>  [54] wJD1205: SummarizedExperiment with 4492 rows and 3 columns"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduces and expands a DataFrame — reduceDataFrame","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"long dataframe can reduced mergeing certain rows single one.  new variables constructed SimpleList containing original values. Invariant columns, .e columns value along rows need merged, can shrunk new variables containing invariant value (rather list columns). grouping rows, .e. rows need shrunk together one, defined vector. opposite operation expand. note DataFrame expanded back, must simplified.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"","code":"reduceDataFrame(x, k, count = FALSE, simplify = TRUE, drop = FALSE)  expandDataFrame(x, k = NULL)"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"x DataFrame reduced expanded. k ‘vector’ length nrow(x) defining grouping based DataFrame shrunk. count logical(1) specifying additional column (called default .n) tally rows shrunk new row added. Note already existing, .n silently overwritten. simplify logical(1) defining invariant columns converted simple lists. Default TRUE. drop logical(1) specifying whether non-invariant columns dropped altogether. Default FALSE.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"expanded (reduced) DataFrame.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"Missing values important effect reduce. Unless values reduces missing, result non-invariant column, dropped drop = TRUE. See example . presence missing values can side effects higher level functions rely reduction DataFrame objects.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/reduceDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduces and expands a DataFrame — reduceDataFrame","text":"","code":"library(\"IRanges\")  k <- sample(100, 1e3, replace = TRUE) df <- DataFrame(k = k,                 x = round(rnorm(length(k)), 2),                 y = seq_len(length(k)),                 z = sample(LETTERS, length(k), replace = TRUE),                 ir = IRanges(seq_along(k), width = 10),                 r = Rle(sample(5, length(k), replace = TRUE)),                 invar = k + 1) df #> DataFrame with 1000 rows and 7 columns #>              k         x         y           z        ir     r     invar #>      <integer> <numeric> <integer> <character> <IRanges> <Rle> <numeric> #> 1           62      1.11         1           C      1-10     1        63 #> 2           25     -0.74         2           W      2-11     2        26 #> 3           96     -0.25         3           U      3-12     2        97 #> 4           91     -0.10         4           X      4-13     2        92 #> 5           40     -0.57         5           T      5-14     5        41 #> ...        ...       ...       ...         ...       ...   ...       ... #> 996         22     -0.65       996           E  996-1005     1        23 #> 997         99     -0.10       997           V  997-1006     5       100 #> 998         63     -0.94       998           E  998-1007     4        64 #> 999        100      0.43       999           X  999-1008     4       101 #> 1000        25      0.27      1000           J 1000-1009     1        26  ## Shinks the DataFrame df2 <- reduceDataFrame(df, df$k) df2 #> DataFrame with 100 rows and 7 columns #>             k                     x               y               z #>     <integer>         <NumericList>   <IntegerList> <CharacterList> #> 1           1 -0.17, 0.37,-1.05,...  58,193,323,...       C,F,G,... #> 2           2  1.55,-0.08, 0.12,... 118,295,439,...       E,P,I,... #> 3           3  0.29,-2.80, 1.29,...  32,140,477,...       X,E,U,... #> 4           4    0.87,0.24,1.20,...  18,194,319,...       Q,Q,V,... #> 5           5  0.86,-0.89,-0.28,...   15,63,121,...       J,Q,V,... #> ...       ...                   ...             ...             ... #> 96         96 -0.25,-0.17,-0.13,...   3,261,410,...       U,M,C,... #> 97         97  0.31,-0.27,-0.57,...   37,42,104,...       L,C,C,... #> 98         98  1.14, 0.84,-0.17,... 144,163,221,...       W,T,P,... #> 99         99    0.04,2.16,0.47,...   33,82,159,...       L,L,A,... #> 100       100  0.38, 0.27,-0.60,...   43,66,489,...       X,F,L,... #>                              ir         r     invar #>                   <IRangesList> <RleList> <numeric> #> 1     58-67,193-202,323-332,... 2,4,2,...         2 #> 2   118-127,295-304,439-448,... 3,5,1,...         3 #> 3     32-41,140-149,477-486,... 4,2,4,...         4 #> 4     18-27,194-203,319-328,... 1,2,3,...         5 #> 5       15-24,63-72,121-130,... 2,5,3,...         6 #> ...                         ...       ...       ... #> 96     3-12,261-270,410-419,... 2,4,1,...        97 #> 97      37-46,42-51,104-113,... 3,4,1,...        98 #> 98  144-153,163-172,221-230,... 4,1,4,...        99 #> 99      33-42,82-91,159-168,... 4,1,4,...       100 #> 100     43-52,66-75,489-498,... 1,1,4,...       101  ## With a tally of the number of members in each group reduceDataFrame(df, df$k, count = TRUE) #> DataFrame with 100 rows and 8 columns #>             k                     x               y               z #>     <integer>         <NumericList>   <IntegerList> <CharacterList> #> 1           1 -0.17, 0.37,-1.05,...  58,193,323,...       C,F,G,... #> 2           2  1.55,-0.08, 0.12,... 118,295,439,...       E,P,I,... #> 3           3  0.29,-2.80, 1.29,...  32,140,477,...       X,E,U,... #> 4           4    0.87,0.24,1.20,...  18,194,319,...       Q,Q,V,... #> 5           5  0.86,-0.89,-0.28,...   15,63,121,...       J,Q,V,... #> ...       ...                   ...             ...             ... #> 96         96 -0.25,-0.17,-0.13,...   3,261,410,...       U,M,C,... #> 97         97  0.31,-0.27,-0.57,...   37,42,104,...       L,C,C,... #> 98         98  1.14, 0.84,-0.17,... 144,163,221,...       W,T,P,... #> 99         99    0.04,2.16,0.47,...   33,82,159,...       L,L,A,... #> 100       100  0.38, 0.27,-0.60,...   43,66,489,...       X,F,L,... #>                              ir         r     invar        .n #>                   <IRangesList> <RleList> <numeric> <integer> #> 1     58-67,193-202,323-332,... 2,4,2,...         2        12 #> 2   118-127,295-304,439-448,... 3,5,1,...         3         9 #> 3     32-41,140-149,477-486,... 4,2,4,...         4         9 #> 4     18-27,194-203,319-328,... 1,2,3,...         5        12 #> 5       15-24,63-72,121-130,... 2,5,3,...         6         9 #> ...                         ...       ...       ...       ... #> 96     3-12,261-270,410-419,... 2,4,1,...        97         7 #> 97      37-46,42-51,104-113,... 3,4,1,...        98        12 #> 98  144-153,163-172,221-230,... 4,1,4,...        99        10 #> 99      33-42,82-91,159-168,... 4,1,4,...       100        16 #> 100     43-52,66-75,489-498,... 1,1,4,...       101        11  ## Much faster, but more crowded result df3 <- reduceDataFrame(df, df$k, simplify = FALSE) df3 #> DataFrame with 100 rows and 7 columns #>                   k                     x               y               z #>       <IntegerList>         <NumericList>   <IntegerList> <CharacterList> #> 1         1,1,1,... -0.17, 0.37,-1.05,...  58,193,323,...       C,F,G,... #> 2         2,2,2,...  1.55,-0.08, 0.12,... 118,295,439,...       E,P,I,... #> 3         3,3,3,...  0.29,-2.80, 1.29,...  32,140,477,...       X,E,U,... #> 4         4,4,4,...    0.87,0.24,1.20,...  18,194,319,...       Q,Q,V,... #> 5         5,5,5,...  0.86,-0.89,-0.28,...   15,63,121,...       J,Q,V,... #> ...             ...                   ...             ...             ... #> 96     96,96,96,... -0.25,-0.17,-0.13,...   3,261,410,...       U,M,C,... #> 97     97,97,97,...  0.31,-0.27,-0.57,...   37,42,104,...       L,C,C,... #> 98     98,98,98,...  1.14, 0.84,-0.17,... 144,163,221,...       W,T,P,... #> 99     99,99,99,...    0.04,2.16,0.47,...   33,82,159,...       L,L,A,... #> 100 100,100,100,...  0.38, 0.27,-0.60,...   43,66,489,...       X,F,L,... #>                              ir         r           invar #>                   <IRangesList> <RleList>   <NumericList> #> 1     58-67,193-202,323-332,... 2,4,2,...       2,2,2,... #> 2   118-127,295-304,439-448,... 3,5,1,...       3,3,3,... #> 3     32-41,140-149,477-486,... 4,2,4,...       4,4,4,... #> 4     18-27,194-203,319-328,... 1,2,3,...       5,5,5,... #> 5       15-24,63-72,121-130,... 2,5,3,...       6,6,6,... #> ...                         ...       ...             ... #> 96     3-12,261-270,410-419,... 2,4,1,...    97,97,97,... #> 97      37-46,42-51,104-113,... 3,4,1,...    98,98,98,... #> 98  144-153,163-172,221-230,... 4,1,4,...    99,99,99,... #> 99      33-42,82-91,159-168,... 4,1,4,... 100,100,100,... #> 100     43-52,66-75,489-498,... 1,1,4,... 101,101,101,...  ## Drop all non-invariant columns reduceDataFrame(df, df$k, drop = TRUE) #> DataFrame with 100 rows and 2 columns #>             k     invar #>     <integer> <numeric> #> 1           1         2 #> 2           2         3 #> 3           3         4 #> 4           4         5 #> 5           5         6 #> ...       ...       ... #> 96         96        97 #> 97         97        98 #> 98         98        99 #> 99         99       100 #> 100       100       101  ## Missing values d <- DataFrame(k = rep(1:3, each = 3),                x = letters[1:9],                y = rep(letters[1:3], each = 3),                y2 = rep(letters[1:3], each = 3)) d #> DataFrame with 9 rows and 4 columns #>           k           x           y          y2 #>   <integer> <character> <character> <character> #> 1         1           a           a           a #> 2         1           b           a           a #> 3         1           c           a           a #> 4         2           d           b           b #> 5         2           e           b           b #> 6         2           f           b           b #> 7         3           g           c           c #> 8         3           h           c           c #> 9         3           i           c           c  ## y is invariant and can be simplified reduceDataFrame(d, d$k) #> DataFrame with 3 rows and 4 columns #>           k               x           y          y2 #>   <integer> <CharacterList> <character> <character> #> 1         1           a,b,c           a           a #> 2         2           d,e,f           b           b #> 3         3           g,h,i           c           c ## y isn't not dropped reduceDataFrame(d, d$k, drop = TRUE) #> DataFrame with 3 rows and 3 columns #>           k           y          y2 #>   <integer> <character> <character> #> 1         1           a           a #> 2         2           b           b #> 3         3           c           c  ## BUT with a missing value d[1, \"y\"] <- NA d #> DataFrame with 9 rows and 4 columns #>           k           x           y          y2 #>   <integer> <character> <character> <character> #> 1         1           a          NA           a #> 2         1           b           a           a #> 3         1           c           a           a #> 4         2           d           b           b #> 5         2           e           b           b #> 6         2           f           b           b #> 7         3           g           c           c #> 8         3           h           c           c #> 9         3           i           c           c  ## y isn't invariant/simplified anymore reduceDataFrame(d, d$k) #> DataFrame with 3 rows and 4 columns #>           k               x               y          y2 #>   <integer> <CharacterList> <CharacterList> <character> #> 1         1           a,b,c          NA,a,a           a #> 2         2           d,e,f           b,b,b           b #> 3         3           g,h,i           c,c,c           c ## y now gets dropped reduceDataFrame(d, d$k, drop = TRUE) #> DataFrame with 3 rows and 2 columns #>           k          y2 #>   <integer> <character> #> 1         1           a #> 2         2           b #> 3         3           c"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Unfold a data frame — unfoldDataFrame","title":"Unfold a data frame — unfoldDataFrame","text":"data frame said folded cells contain multiple elements. often encode semi-colon separated character , \";b\". function transform data frame \"\" \"b\" split recorded across two lines. simple example illustrates trivial case, table unfolded based Y variable becomes value 1 variable X now duplicated. second variable follows pattern one used unfold table, also gets unfolded. becomes implied element \";b\" match \"x;y\" respective indices. Note example, unfolding Y Z produces result. However, following table unfolded Y produces \"c\" \"x;y\" along second row match. case, unfolding Z produce different result. examples also illustrated . Note foldDataFrame() function. See reduceDataFrame() expandDataFrame() flexibly encode handle vectors length > 1 within cells.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfold a data frame — unfoldDataFrame","text":"","code":"unfoldDataFrame(x, k, split = \";\")"},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unfold a data frame — unfoldDataFrame","text":"x DataFrame data.frame unfolded. k character(1) referring character variable x, used unfold x. split character(1) passed strsplit() split x[[k]].","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unfold a data frame — unfoldDataFrame","text":"new object unfolded object class class(x) numbers rows >= nrow(x) columns identical x.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unfold a data frame — unfoldDataFrame","text":"Laurent Gatto","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/reference/unfoldDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unfold a data frame — unfoldDataFrame","text":"","code":"(x0 <- DataFrame(X = 1:2, Y = c(\"a;b\", \"c\"))) #> DataFrame with 2 rows and 2 columns #>           X           Y #>   <integer> <character> #> 1         1         a;b #> 2         2           c unfoldDataFrame(x0, \"Y\") #> DataFrame with 3 rows and 2 columns #>           X           Y #>   <integer> <character> #> 1         1           a #> 2         1           b #> 3         2           c  (x1 <- DataFrame(X = 1:2, Y = c(\"a;b\", \"c\"), Z = c(\"x;y\", \"z\"))) #> DataFrame with 2 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1         a;b         x;y #> 2         2           c           z unfoldDataFrame(x1, \"Y\") #> DataFrame with 3 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1           a           x #> 2         1           b           y #> 3         2           c           z unfoldDataFrame(x1, \"Z\") ## same #> DataFrame with 3 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1           a           x #> 2         1           b           y #> 3         2           c           z  (x2 <- DataFrame(X = 1:2, Y = c(\"a;b\", \"c\"), Z = c(\"x;y\", \"x;y\"))) #> DataFrame with 2 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1         a;b         x;y #> 2         2           c         x;y unfoldDataFrame(x2, \"Y\") #> DataFrame with 3 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1           a         x;y #> 2         1           b         x;y #> 3         2           c         x;y unfoldDataFrame(x2, \"Z\") ## different #> DataFrame with 4 rows and 3 columns #>           X           Y           Z #>   <integer> <character> <character> #> 1         1         a;b           x #> 2         1         a;b           y #> 3         2           c           x #> 4         2           c           y"},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-19","dir":"Changelog","previous_headings":"","what":"QFeatures 1.19.2","title":"QFeatures 1.19","text":"Aggregate features optimisation.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-19-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.19.1","title":"QFeatures 1.19","text":"Fix duplicated fnames bug (see issue #237). Use longForm() methods (replacing longFormat(), now defunct). Add longForm,SummarizedExperiment, supporting rowvars colvars, longForm,QFeatures . Without method, uses longForm,doesn’t. Defined QFeatures object type (bulk single-cell) instance’s metadata slot (developer features).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-19-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.19.0","title":"QFeatures 1.19","text":"New devel version","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.5","title":"QFeatures 1.17","text":"Remove superfluous message filtering keep = TRUE (see issue 231).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.4","title":"QFeatures 1.17","text":"Optimisation aggregateFeatures case multiple assays aggregation.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.3","title":"QFeatures 1.17","text":"Fix bug nNA() empty assays (see #174).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.2","title":"QFeatures 1.17","text":"Fix fnames argument readQFeatures(). fnames argument passed readSummarizedExperiment() anymore, used readQFeatures(). Rownames now set splitting. Given rownames must unique enforced make.unique(), previous behaviour misnamed features get name.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17-4","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.1","title":"QFeatures 1.17","text":"Fix: solved readQFeatures() bug adapted unit tests. Docs: created new vignette reading data QFeatures","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-17-5","dir":"Changelog","previous_headings":"","what":"QFeatures 1.17.0","title":"QFeatures 1.17","text":"New Bioconductor 3.21 (devel) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-16","dir":"Changelog","previous_headings":"","what":"QFeatures 1.16.0","title":"QFeatures 1.16","text":"New Bioconductor 3.20 (stable) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-15","dir":"Changelog","previous_headings":"","what":"QFeatures 1.15.3","title":"QFeatures 1.15","text":"Fix typo normalisation methods.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-15-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.15.2","title":"QFeatures 1.15","text":"Fix bug QFeatures::longFormat() rownames numerical (reported upstream https://github.com/waldronlab/MultiAssayExperiment/issues/331). Starting New API unit test (see issue #214.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-15-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.15.1","title":"QFeatures 1.15","text":"Import reshape2::melt, required MultiAssayExperiment::longFormat().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-15-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.15.0","title":"QFeatures 1.15","text":"New Bioc devel","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.7","title":"QFeatures 1.13","text":"Fix filterFeatures() filter variable also exists global environment (issue #208).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.6","title":"QFeatures 1.13","text":"Migrate .splitS[C]E() unit test form scp QFeatures.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.5","title":"QFeatures 1.13","text":"Reuse readQFeatres() params readQFeatureFromDIANN().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.4","title":"QFeatures 1.13","text":"Use DIA-NN example data MsDataHub readQFeaturesFromDIANN().","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-4","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.3","title":"QFeatures 1.13","text":"Fix .vector() (see issue #203) readQFeatures() multi-set support (ported scp::readSCP() - see issue #199). new readQFeaturesFromDIANN() function import DIA-NN report files (ported scp::readSCPfromDIANN() - see issue #199).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-5","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.2","title":"QFeatures 1.13","text":"Move filterFeatures generic method ProtGenerics.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-13-6","dir":"Changelog","previous_headings":"","what":"QFeatures 1.13.1","title":"QFeatures 1.13","text":"Fix typo vigette.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-11","dir":"Changelog","previous_headings":"","what":"QFeatures 1.11.2","title":"QFeatures 1.11","text":"Update message fix test upon recent changes MAE.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-11-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.11.1","title":"QFeatures 1.11","text":"Update nNA() filterNA() man pages clarify percentages proportions (see #189).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-11-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.11.0","title":"QFeatures 1.11","text":"New Bioconductor 3.18 (stable) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-10","dir":"Changelog","previous_headings":"","what":"QFeatures 1.10.0","title":"QFeatures 1.10","text":"New Bioconductor 3.17 (stable) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-9","dir":"Changelog","previous_headings":"","what":"QFeatures 1.9.4","title":"QFeatures 1.9","text":"New dropEmptyAssays() function (see issue #184).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-9-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.9.3","title":"QFeatures 1.9","text":"Minor rephrasing vignette README.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-9-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.9.2","title":"QFeatures 1.9","text":"feat: filterFeatures() now allows select assays filter (argument) feat: aggregateFeatures() can now take multiple assays feat: impute() can now take multiple assays feat: processing functions (normalize, scaleTransform, logTransform, sweep) can now take multiple assays refactor: avoid validObject() possible Use |> rather %>%.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-9-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.9.1","title":"QFeatures 1.9","text":"fix: solved bug selectRowData()","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-9-4","dir":"Changelog","previous_headings":"","what":"QFeatures 1.9.0","title":"QFeatures 1.9","text":"New Bioconductor 3.17 (devel) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-8","dir":"Changelog","previous_headings":"","what":"QFeatures 1.8.0","title":"QFeatures 1.8","text":"New Bioconductor 3.16 (stable) release","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-7","dir":"Changelog","previous_headings":"","what":"QFeatures 1.7.3","title":"QFeatures 1.7","text":"fix: fixed filterFeatures selection contains environment variables","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-7-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.7.2","title":"QFeatures 1.7","text":"feat: added c methods combine QFeatures objects. feat: added nrows ncols methods. Also added use.names argument (cf ?BiocGenerics::dims) docs: improved docs filterFeatures() tests: improved unit tests filterFeatures() feat: added keep argument filterFeatures() control whether keep remove features assays contain filter variable. Also added message printing better overview variable found. fix: fixed addAssay() solve issue #104. refactor: refactored addAssay() dramatically improved usage computational resources. feat: colData automatically transferred assay QFeatures object. feat: implemented removeAssay() replaceAssay(). Together addAssay(), functions used implement replacement method [[<- required solve issue #57. Add CC--SA license vignettes.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-7-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.7.1","title":"QFeatures 1.7","text":"refactor: imputation now adds new assay instead replacing values.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-7-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.7.0","title":"QFeatures 1.7","text":"New Bioc devel version.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-5","dir":"Changelog","previous_headings":"","what":"QFeatures 1.5.3","title":"QFeatures 1.5","text":"feat: aggregation adjacency matrix New adjacencyMatrix,SummarizedExperiment adjacencyMatrix,QFeatures methods using ProtGenerics::adjacencyMatrix (available version >= 1.27.1).","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-5-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.5.2","title":"QFeatures 1.5","text":"fix: implemented updateObject() method QFeatures objects.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-5-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.5.1","title":"QFeatures 1.5","text":"Document use peptide/protein adjacency matrices aggregateFeatures() new adjacencyMatrix() accessor.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-5-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.5.0","title":"QFeatures 1.5","text":"New devel version (Bioc 3.15)","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.6","title":"QFeatures 1.3","text":"New feat3 example data demonstrate test complex AssayLinks structure. Improved plot,QFeautres function avoid cluttering nodes. Adapted visualization vignette using feat3.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.5","title":"QFeatures 1.3","text":"Add plot,QFeatures visualisation vignette.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.4","title":"QFeatures 1.3","text":"Fixed bug produced invalid AssayLinks using filterNA.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.3","title":"QFeatures 1.3","text":"Improved validity checks AssayLinks Fixed subsetting AssayLinks ensure consistent data","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-4","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.2","title":"QFeatures 1.3","text":"Add logo package Fix class coercion error (see #b9ce7f1e9)","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-5","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.1","title":"QFeatures 1.3","text":"Added rbindRowData: function select variables rowData bind single DataFrame Added rowData<-: new method replaces replaceRowDataCols offer standardize functionality. Added new section QFeatures vignette expand manipulate metadata within QFeatures object","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-3-6","dir":"Changelog","previous_headings":"","what":"QFeatures 1.3.0","title":"QFeatures 1.3","text":"New devel version (Bioc 3.14)","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-2-0","dir":"Changelog","previous_headings":"","what":"QFeatures 1.2.0","title":"QFeatures 1.2.0","text":"New release version (Bioc 3.13)","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-1-0","dir":"Changelog","previous_headings":"","what":"QFeatures 1.1.4","title":"QFeatures 1.1.0","text":"Added replaceRowDataCols removeRowDataCols, two functions streamline manipulation rowData within QFeature object.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-1-0-1","dir":"Changelog","previous_headings":"","what":"QFeatures 1.1.3","title":"QFeatures 1.1.0","text":"Added countUniqueFeatures, function count number unique features per sample.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-1-0-2","dir":"Changelog","previous_headings":"","what":"QFeatures 1.1.2","title":"QFeatures 1.1.0","text":"Manually install preprocessCore (see https://github.com/Bioconductor/bioconductor_docker/issues/22 details) use quantile normalisation vignette tests. Update vignette show normalize() logTransform() directly QFeatures object reference QFeaturesWorkshop2020 workshop WSBIM2122 chap 8.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-1-0-3","dir":"Changelog","previous_headings":"","what":"QFeatures 1.1.1","title":"QFeatures 1.1.0","text":"Fix typo vignette Improve first paragraph intro vignette.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-1-1-0-4","dir":"Changelog","previous_headings":"","what":"QFeatures 1.1.0","title":"QFeatures 1.1.0","text":"New Bioconductor devel version","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-0-99","dir":"Changelog","previous_headings":"","what":"QFeatures 0.99.4","title":"QFeatures 0.99","text":"Fix: improved nNA new implementation additional unit tests <2020-10-23 Fri>","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-0-99-1","dir":"Changelog","previous_headings":"","what":"QFeatures 0.99.3","title":"QFeatures 0.99","text":"New feature: longFormat function returns long DataFrame quantitative data along metadata (see #116) <2020-10-8 Thu> New feature: rowData method returns list containing rowData assays (see #86) <2020-09-16 Wed> Keep colnames reading single column assay (see #108) <2020-09-09 Wed>","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-0-99-2","dir":"Changelog","previous_headings":"","what":"QFeatures 0.99.2","title":"QFeatures 0.99","text":"Added infIsNA. Add Christophe Vanderaa author.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-0-99-3","dir":"Changelog","previous_headings":"","what":"QFeatures 0.99.1","title":"QFeatures 0.99","text":"Address comments Bioconductor review (see submission issue details.","code":""},{"path":"https://rformassspectrometry.github.io/QFeatures/news/index.html","id":"qfeatures-0-99-4","dir":"Changelog","previous_headings":"","what":"QFeatures 0.99.0","title":"QFeatures 0.99","text":"Bioconductor submission","code":""}]
